{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kernel Glossary","text":"<p>Welcome to the 0xff07/kernel-glossary. You can find the webpage version of this repository on:</p> <p>https://0xff07.github.io/kernel-glossary.</p>"},{"location":"#about","title":"About","text":"<p>This is a place where I dump breadcrumbs of kernel subsystems, mostly conference videos. At first, I made this mostly because they make really good stories about the kernel, and it happens that I enjoy both learning Linux and listening to stories. Later there's another more practical purpose: to learn subsystems faster when the necessity arises. A more stressful way, but I always feel refreshed when I see a living subsystem face to face. It's like the magical feeling of touching snow for the first time.</p> <p>This is still a work in progress, but I doubt that it'll ever be finished. It's like drawing a map for a place where the landscape changes weekly. That being said, exploration is part of the fun. My hope is that by creating this, I'm also sharing the joy of exploration with people who might also be interested in the kernel. So here we are!</p>"},{"location":"#browsing-the-glossary","title":"Browsing the glossary","text":"<p>Expand the navigation bar, or check out the TAGS page.</p> <p>All Markdown files are tagged and can be found on the TAGS page. However, not all Markdown files appear in the navigation bar. This is usually because there are currently too few entries for that subsystem, making the index too fragmented\u2014or more likely\u2014simply because of my laziness.</p>"},{"location":"TAGS/","title":"Tags","text":""},{"location":"TAGS/#tag:acpi","title":"acpi","text":"<ul> <li>            ACPI          </li> <li>            ACPI C-States          </li> <li>            ACPI P-States          </li> <li>            ACPI S-States          </li> <li>            ACPI debugging          </li> <li>            ACPI power management objects          </li> </ul>"},{"location":"TAGS/#tag:barriers","title":"barriers","text":"<ul> <li>            CPU barriers          </li> </ul>"},{"location":"TAGS/#tag:bus","title":"bus","text":"<ul> <li>            I2C          </li> <li>            PCIe          </li> <li>            Platform          </li> <li>            SPI          </li> <li>            USB          </li> </ul>"},{"location":"TAGS/#tag:concurrency","title":"concurrency","text":"<ul> <li>            CPU barriers          </li> <li>            Compiler barriers          </li> <li>            IRQ          </li> <li>            Memory model          </li> <li>            Overview          </li> <li>            Processes          </li> <li>            RCU          </li> <li>            System call          </li> <li>            Threaded IRQ          </li> <li>            Timer and timekeeping          </li> <li>            Workqueue          </li> <li>            dl_sched          </li> <li>            fair_sched          </li> <li>            hrtimer          </li> <li>            mutex          </li> <li>            preemption          </li> <li>            rt_sched          </li> <li>            semaphore          </li> <li>            softirq          </li> <li>            spinlock          </li> <li>            strace          </li> <li>            tasklet          </li> <li>            vDSO          </li> </ul>"},{"location":"TAGS/#tag:context","title":"context","text":"<ul> <li>            IRQ          </li> <li>            Processes          </li> <li>            softirq          </li> </ul>"},{"location":"TAGS/#tag:debugging","title":"debugging","text":"<ul> <li>            Analyze call traces          </li> <li>            Debugging overview          </li> <li>            Dynamic debug          </li> <li>            Event sources          </li> <li>            KASAN          </li> <li>            KCSAN          </li> <li>            KFENCE          </li> <li>            KMEMLEAD          </li> <li>            Kprobes          </li> <li>            Lockdep          </li> <li>            Overview          </li> <li>            SPARSE          </li> <li>            Tracepoints          </li> <li>            Tracing overview          </li> <li>            UBSAN          </li> <li>            apitrace          </li> <li>            bpftrace          </li> <li>            coccinelle          </li> <li>            debugfs          </li> <li>            decode_stacktrace.sh          </li> <li>            drgn          </li> <li>            ftrace (trace-cmd)          </li> <li>            ftrace (tracefs)          </li> <li>            kdump          </li> <li>            kgdb          </li> <li>            pstore          </li> <li>            smatch          </li> </ul>"},{"location":"TAGS/#tag:display-interface","title":"display-interface","text":"<ul> <li>            DisplayPort          </li> <li>            HDMI          </li> <li>            LVDS          </li> <li>            RGB          </li> <li>            VGA          </li> </ul>"},{"location":"TAGS/#tag:drivers","title":"drivers","text":"<ul> <li>            ACPI          </li> <li>            Clocks          </li> <li>            DMA          </li> <li>            DT schema          </li> <li>            Device tree          </li> <li>            Driver model          </li> <li>            GPIO          </li> <li>            I2C          </li> <li>            Interrupts          </li> <li>            Kernel modules          </li> <li>            PCIe          </li> <li>            Platform          </li> <li>            SPI          </li> <li>            USB          </li> <li>            device_link          </li> <li>            firmware          </li> <li>            pinctrl          </li> <li>            regmap          </li> <li>            udev          </li> </ul>"},{"location":"TAGS/#tag:git","title":"git","text":"<ul> <li>            git basics          </li> <li>            git bisect          </li> <li>            git cherry-pick          </li> <li>            git interrogators          </li> <li>            git rebase          </li> <li>            git rebase (interactive)          </li> <li>            git worktree          </li> </ul>"},{"location":"TAGS/#tag:graphics","title":"graphics","text":"<ul> <li>            Atomic KMS          </li> <li>            DP-MST          </li> <li>            DRI          </li> <li>            DRM-CI          </li> <li>            Display Pipeline          </li> <li>            DisplayPort          </li> <li>            EDID          </li> <li>            HDMI          </li> <li>            KMS          </li> <li>            KMS Bridges          </li> <li>            KUnit tests          </li> <li>            LVDS          </li> <li>            Mesa          </li> <li>            Mutter          </li> <li>            RGB          </li> <li>            Rendering Pipeline          </li> <li>            VGA          </li> <li>            Wayland protocol          </li> <li>            apitrace          </li> <li>            igt-gpu-toos          </li> <li>            libdrm          </li> <li>            libinput          </li> <li>            simpledrm          </li> <li>            vkms          </li> </ul>"},{"location":"TAGS/#tag:kms","title":"kms","text":"<ul> <li>            Atomic KMS          </li> <li>            Display Pipeline          </li> <li>            KMS          </li> <li>            KMS Bridges          </li> <li>            simpledrm          </li> <li>            vkms          </li> </ul>"},{"location":"TAGS/#tag:locking","title":"locking","text":"<ul> <li>            RCU          </li> <li>            mutex          </li> <li>            semaphore          </li> <li>            spinlock          </li> </ul>"},{"location":"TAGS/#tag:pcie","title":"pcie","text":"<ul> <li>            AER          </li> <li>            Configuration          </li> <li>            D-states          </li> <li>            D3Cold          </li> <li>            Detect          </li> <li>            L0s (by ASPM)          </li> <li>            L1 (by ASPM)          </li> <li>            L1 (by PCI-PM)          </li> <li>            L1 substates          </li> <li>            L2          </li> <li>            L2/L3 Ready          </li> <li>            L3          </li> <li>            LTR          </li> <li>            LTSSM overview          </li> <li>            Link speed change          </li> <li>            Link width change          </li> <li>            PME          </li> <li>            Polling          </li> <li>            Recovery          </li> <li>            Recovery.Equalization          </li> <li>            TS1 and TS2          </li> <li>            The L0 state          </li> </ul>"},{"location":"TAGS/#tag:pcie-ltssm","title":"pcie-ltssm","text":"<ul> <li>            Configuration          </li> <li>            Detect          </li> <li>            L2/L3 Ready          </li> <li>            LTSSM overview          </li> <li>            Link speed change          </li> <li>            Link width change          </li> <li>            Polling          </li> <li>            Recovery          </li> <li>            Recovery.Equalization          </li> <li>            TS1 and TS2          </li> <li>            The L0 state          </li> </ul>"},{"location":"TAGS/#tag:postmoterm","title":"postmoterm","text":"<ul> <li>            drgn          </li> <li>            kdump          </li> </ul>"},{"location":"TAGS/#tag:power-management","title":"power-management","text":"<ul> <li>            ACPI C-States          </li> <li>            ACPI P-States          </li> <li>            ACPI S-States          </li> <li>            ACPI debugging          </li> <li>            ACPI power management objects          </li> <li>            D-states          </li> <li>            D3Cold          </li> <li>            L0s (by ASPM)          </li> <li>            L1 (by ASPM)          </li> <li>            L1 (by PCI-PM)          </li> <li>            L1 substates          </li> <li>            L2          </li> <li>            L3          </li> <li>            LTR          </li> <li>            Modern Standby (S0ix)          </li> <li>            OPP          </li> <li>            PM Domain (genpd)          </li> <li>            PM Frameworks          </li> <li>            PM QoS          </li> <li>            PME          </li> <li>            Runtime PM          </li> <li>            Standby          </li> <li>            Suspend-to-idle          </li> <li>            Suspend-to-ram          </li> <li>            System-wide suspend          </li> <li>            The L0 state          </li> <li>            Thermal subsystem          </li> <li>            cpufreq          </li> <li>            cpuidle          </li> <li>            thermald          </li> </ul>"},{"location":"TAGS/#tag:sanitizers","title":"sanitizers","text":"<ul> <li>            KASAN          </li> <li>            KCSAN          </li> <li>            KFENCE          </li> <li>            KMEMLEAD          </li> <li>            Lockdep          </li> <li>            Overview          </li> <li>            UBSAN          </li> </ul>"},{"location":"TAGS/#tag:schedulers","title":"schedulers","text":"<ul> <li>            dl_sched          </li> <li>            fair_sched          </li> <li>            rt_sched          </li> </ul>"},{"location":"TAGS/#tag:sound","title":"sound","text":"<ul> <li>            ALSA          </li> <li>            ASoC          </li> <li>            DAPM          </li> <li>            HDA          </li> <li>            Pipewire          </li> <li>            PulseAudio          </li> <li>            Sound Open Firmware (SoF)          </li> <li>            Soundwire          </li> <li>            Wireplumber          </li> <li>            alsa-ucm-conf          </li> <li>            alsalib (libasound)          </li> </ul>"},{"location":"TAGS/#tag:static-analysis","title":"static-analysis","text":"<ul> <li>            SPARSE          </li> <li>            coccinelle          </li> </ul>"},{"location":"TAGS/#tag:system-calls","title":"system-calls","text":"<ul> <li>            System call          </li> <li>            strace          </li> <li>            vDSO          </li> </ul>"},{"location":"TAGS/#tag:testing","title":"testing","text":"<ul> <li>            DRM-CI          </li> <li>            KUnit tests          </li> <li>            igt-gpu-toos          </li> </ul>"},{"location":"TAGS/#tag:time","title":"time","text":"<ul> <li>            Timer and timekeeping          </li> <li>            hrtimer          </li> </ul>"},{"location":"TAGS/#tag:tooling","title":"tooling","text":"<ul> <li>            AI-assisted coding          </li> <li>            AUTOSEL          </li> <li>            Applying .mbox and .patch          </li> <li>            Backporting          </li> <li>            Kbuild          </li> <li>            Kconfig          </li> <li>            Kernel binaries          </li> <li>            Kernel compilation (cross)          </li> <li>            Kernel compilation (native)          </li> <li>            Patch format          </li> <li>            PatchWise          </li> <li>            Xapian Query Syntax          </li> <li>            b4          </li> <li>            git basics          </li> <li>            git bisect          </li> <li>            git cherry-pick          </li> <li>            git interrogators          </li> <li>            git rebase          </li> <li>            git rebase (interactive)          </li> <li>            git send-email          </li> <li>            git worktree          </li> <li>            lei          </li> </ul>"},{"location":"TAGS/#tag:tracing","title":"tracing","text":"<ul> <li>            Event sources          </li> <li>            Tracepoints          </li> <li>            Tracing overview          </li> <li>            bpftrace          </li> <li>            ftrace (trace-cmd)          </li> <li>            ftrace (tracefs)          </li> </ul>"},{"location":"TAGS/#tag:userspace-graphics","title":"userspace-graphics","text":"<ul> <li>            Mesa          </li> <li>            Mutter          </li> <li>            Wayland protocol          </li> <li>            libdrm          </li> <li>            libinput          </li> </ul>"},{"location":"TAGS/#tag:work-deferring","title":"work-deferring","text":"<ul> <li>            Workqueue          </li> <li>            tasklet          </li> </ul>"},{"location":"TAGS/#tag:workflows","title":"workflows","text":"<ul> <li>            Coding patterns          </li> <li>            Overview          </li> <li>            Release model          </li> <li>            Stable releases          </li> <li>            Upstreaming process          </li> <li>            patman          </li> </ul>"},{"location":"concurrency/compiler-barriers/","title":"Compiler Barriers","text":"","tags":["concurrency"]},{"location":"concurrency/compiler-barriers/#references","title":"References","text":"","tags":["concurrency"]},{"location":"concurrency/compiler-barriers/#videos","title":"Videos","text":"<ul> <li>Mentorship Session: The Kernel Concurrency Sanitizer</li> <li>Status Report: Broken Dependency Orderings in the Linux Kernel - Marco Elver, Paul Heidekr\u00fcger</li> </ul>","tags":["concurrency"]},{"location":"concurrency/cpu-barriers/","title":"CPU Barriers","text":"","tags":["concurrency","barriers"]},{"location":"concurrency/cpu-barriers/#references","title":"References","text":"","tags":["concurrency","barriers"]},{"location":"concurrency/cpu-barriers/#videos","title":"Videos","text":"<ul> <li>Mentorship Session: The Kernel Concurrency Sanitizer</li> <li>Does an x86 CPU Reorder Instructions?</li> <li>Arm's Weakly-Ordered Memory Model and Barrier Requirements - Ash Wilding, Amazon</li> <li>Arm Barriers 101: When to use DSB and ISB</li> <li>What Every Programmer Should Know about How CPUs Work \u2022 Matt Godbol  \u2022 GOTO 2024</li> </ul>","tags":["concurrency","barriers"]},{"location":"concurrency/dl_sched/","title":"dl_sched","text":"","tags":["concurrency","schedulers"]},{"location":"concurrency/dl_sched/#references","title":"References","text":"","tags":["concurrency","schedulers"]},{"location":"concurrency/dl_sched/#videos","title":"Videos","text":"<ul> <li>(Part 1, 9am GMT) Using Linux kernel for Real-Time Systems (38:10)</li> <li>(Part 2, 9am GMT) Using Linux-Kernel for Real-Time systems (23:08)</li> <li>SCHED_DEADLINE semi partitioned scheduler and dlmon</li> <li>Embedded Recipes 2017 - Understanding SCHED_DEADLINE - Steven Rostedt</li> <li>Results from using SCHED_DEADLINE for energy-aware optimization of RT DAGs on heterogeneous hardware</li> </ul>","tags":["concurrency","schedulers"]},{"location":"concurrency/fair_sched/","title":"fair_sched","text":"","tags":["concurrency","schedulers"]},{"location":"concurrency/fair_sched/#references","title":"References","text":"","tags":["concurrency","schedulers"]},{"location":"concurrency/fair_sched/#videos","title":"Videos","text":"<ul> <li>(Part 1, 9am GMT) Using Linux kernel for Real-Time Systems (21:49)</li> <li>(Part 2, 9am GMT) Using Linux-Kernel for Real-Time systems (12:08)</li> <li>Michal Koutn\u00fd: EEVDF is the new (sched_)normal</li> <li>From Linux CFS Scheduler to Goroutine Scheduler</li> <li>SAN19-419 Why you should use the SCHED_IDLE CFS scheduling policy</li> <li>Introduction to SCHED_NORMAL (Peter Zijlstra)</li> </ul>","tags":["concurrency","schedulers"]},{"location":"concurrency/hrtimer/","title":"hrtimer","text":"","tags":["concurrency","time"]},{"location":"concurrency/hrtimer/#references","title":"References","text":"","tags":["concurrency","time"]},{"location":"concurrency/hrtimer/#videos","title":"Videos","text":"<ul> <li>Let's code a Linux Driver - 9: High Resolution Timer in a Linux Kernel Module</li> </ul>","tags":["concurrency","time"]},{"location":"concurrency/hrtimer/#links","title":"Links","text":"<ul> <li>[PATCH v2 00/12] Consolidate hrtimer initialization - Part 5</li> <li>[PATCH v2 00/31] hrtimers: Consolidate hrtimer initialization - Part 2</li> </ul>","tags":["concurrency","time"]},{"location":"concurrency/irq/","title":"IRQ","text":"","tags":["concurrency","context"]},{"location":"concurrency/irq/#references","title":"References","text":"","tags":["concurrency","context"]},{"location":"concurrency/irq/#videos","title":"Videos","text":"<ul> <li>A Journey into Linux Interrupt Handling Bottom Halves - Allen Pais, Microsoft</li> <li>IRQs: the Hard, the Soft, the Threaded and the Preemptible</li> <li>Understanding Linux Interrupt Subsystem - Priya Dixit, Samsung Semiconductor India Research</li> </ul>","tags":["concurrency","context"]},{"location":"concurrency/memory-model/","title":"Memory Model","text":"","tags":["concurrency"]},{"location":"concurrency/memory-model/#references","title":"References","text":"","tags":["concurrency"]},{"location":"concurrency/memory-model/#videos","title":"Videos","text":"<ul> <li>Mentorship Session: The Kernel Concurrency Sanitizer</li> <li>More Science Fiction than Fairy Tale: A Discussion of the Linux Kernel Memory Mo... Jonas Oberhauser</li> <li>P99 CONF 2023 | How to Avoid Learning the Linux-Kernel Memory Model by Paul McKenney</li> <li>Kernel Recipes 2024 - Case Study: Concurrent Counting</li> </ul>","tags":["concurrency"]},{"location":"concurrency/mutex/","title":"mutex","text":"","tags":["concurrency","locking"]},{"location":"concurrency/mutex/#references","title":"References","text":"","tags":["concurrency","locking"]},{"location":"concurrency/mutex/#videos","title":"Videos","text":"<ul> <li>Let's code a Linux Driver - 28: Mutex exclusive access to shared resources</li> </ul>","tags":["concurrency","locking"]},{"location":"concurrency/mutex/#links","title":"Links","text":"<ul> <li>Unreliable Guide To Locking on kernel doc.</li> </ul>","tags":["concurrency","locking"]},{"location":"concurrency/preemption/","title":"Preemption","text":"","tags":["concurrency"]},{"location":"concurrency/preemption/#references","title":"References","text":"","tags":["concurrency"]},{"location":"concurrency/preemption/#videos","title":"Videos","text":"<ul> <li>(Part 2, 9am GMT) Using Linux-Kernel for Real-Time systems (51:15)</li> <li>Giovanni Gherdovich: Recent works on kernel preemption models</li> <li>Giovanni Gherdovich The four kernel preemption flavors in Linux</li> <li>Real time Linux - Bogdan Lezhepekov, Radoslav Kolev (18:15)</li> <li>An introduction to real-time Linux</li> <li>Kernel Recipes 2023 - Coming soon</li> </ul>","tags":["concurrency"]},{"location":"concurrency/processes/","title":"Processes","text":"","tags":["concurrency","context"]},{"location":"concurrency/processes/#references","title":"References","text":"","tags":["concurrency","context"]},{"location":"concurrency/processes/#videos","title":"Videos","text":"<ul> <li>Context Switching in the Linux Kernel - Sharad</li> <li>Tutorial: Leveraging the OS CPU Scheduler to Write Real-Time MT Apps - Kaiwan Billimoria, kaiwanTECH</li> <li>Thread implementation #5 - Linux context switch | cs370</li> <li>Breaking and Protecting Linux Kernel Stack - Elena Reshetova, Intel</li> <li>Threads in Embedded Linux- 6 Easy Pieces - Lo\u00efc Domaign\u00e9, Doulos</li> </ul>","tags":["concurrency","context"]},{"location":"concurrency/rcu/","title":"RCU","text":"","tags":["concurrency","locking"]},{"location":"concurrency/rcu/#references","title":"References","text":"","tags":["concurrency","locking"]},{"location":"concurrency/rcu/#videos","title":"Videos","text":"<ul> <li>Decoding Those Inscrutable RCU CPU Stall Warnings</li> <li>Mentorship Session: Unraveling RCU-Usage Mysteries (Fundamentals)</li> <li>Mentorship Session: Unraveling RCU-Usage Mysteries (Additional Use Cases)</li> </ul>","tags":["concurrency","locking"]},{"location":"concurrency/rt_sched/","title":"rt_sched","text":"","tags":["concurrency","schedulers"]},{"location":"concurrency/rt_sched/#references","title":"References","text":"","tags":["concurrency","schedulers"]},{"location":"concurrency/rt_sched/#videos","title":"Videos","text":"<ul> <li>(Part 1, 9am GMT) Using Linux kernel for Real-Time Systems (32:19)</li> <li>(Part 2, 9am GMT) Using Linux-Kernel for Real-Time systems (20:22)</li> </ul>","tags":["concurrency","schedulers"]},{"location":"concurrency/scheduler-overview/","title":"Scheduler Overview","text":"","tags":["concurrency"]},{"location":"concurrency/scheduler-overview/#references","title":"References","text":"","tags":["concurrency"]},{"location":"concurrency/scheduler-overview/#videos","title":"Videos","text":"<ul> <li>LLC 2025 - Linux scheduler overview and update, by Linus Walleij</li> <li>(Part 1, 9am GMT) Using Linux kernel for Real-Time Systems (21:49)</li> <li>(Part 2, 9am GMT) Using Linux-Kernel for Real-Time systems (12:08)</li> <li>Brief History of Linux CPU Scheduler - Huichun Feng</li> <li>YVR18-220:The Linux Kernel Scheduler (For Beginners)</li> <li>BKK19-TR03 - The Linux Kernel Scheduler - Overview</li> <li>SAN19-220 Deep dive in the scheduler</li> </ul>","tags":["concurrency"]},{"location":"concurrency/semaphore/","title":"semaphore","text":"","tags":["concurrency","locking"]},{"location":"concurrency/semaphore/#references","title":"References","text":"","tags":["concurrency","locking"]},{"location":"concurrency/semaphore/#links","title":"Links","text":"<ul> <li>The shrinking role of semaphores on LWN</li> </ul>","tags":["concurrency","locking"]},{"location":"concurrency/softirq/","title":"softirq","text":"","tags":["concurrency","context"]},{"location":"concurrency/softirq/#references","title":"References","text":"","tags":["concurrency","context"]},{"location":"concurrency/softirq/#videos","title":"Videos","text":"<ul> <li>A Journey into Linux Interrupt Handling Bottom Halves - Allen Pais, Microsoft</li> <li>Getting Around to It: Deferred Work in the Linux Kernel - Alison Chaiken, Aurora Innovation</li> <li>IRQs: the Hard, the Soft, the Threaded and the Preemptible</li> <li>Unblocking the softirq lock for PREEMPT_RT - Sebastian Siewior</li> </ul>","tags":["concurrency","context"]},{"location":"concurrency/spinlock/","title":"spinlock","text":"","tags":["concurrency","locking"]},{"location":"concurrency/spinlock/#references","title":"References","text":"","tags":["concurrency","locking"]},{"location":"concurrency/spinlock/#videos","title":"Videos","text":"<ul> <li>Real time Linux - Bogdan Lezhepekov, Radoslav Kolev (20:44)</li> <li>Alex Kogan \u2014 New locks for the old kernel</li> <li>Parallelisation in the Linux Kernel - Handmade Seattle 2020</li> </ul>","tags":["concurrency","locking"]},{"location":"concurrency/spinlock/#links","title":"Links","text":"<ul> <li>Also see Unreliable Guide To Locking on kernel doc.</li> </ul>","tags":["concurrency","locking"]},{"location":"concurrency/strace/","title":"EDITME","text":"","tags":["concurrency","system-calls"]},{"location":"concurrency/strace/#references","title":"References","text":"","tags":["concurrency","system-calls"]},{"location":"concurrency/strace/#videos","title":"Videos","text":"<ul> <li>Strace: Monitoring The Kernel-User-Space Conversation - Michael Kerrisk</li> <li>Modern strace - DevConf.CZ 2023</li> <li>Tutorial: Debugging with Strace - A Peek Behind the Scenes of Linux Processes - Avikam Rozenfeld</li> <li>Using strace to troubleshoot issues - DevConf.CZ 2021</li> <li>Using Strace to Understand GitLab - Part 1: Intro</li> <li>Using Strace to Understand GitLab - Part 2: Git</li> </ul>","tags":["concurrency","system-calls"]},{"location":"concurrency/system-calls/","title":"System Calls","text":"","tags":["concurrency","system-calls"]},{"location":"concurrency/system-calls/#references","title":"References","text":"","tags":["concurrency","system-calls"]},{"location":"concurrency/system-calls/#videos","title":"Videos","text":"<ul> <li>Syscalls and Strace</li> <li>What Have Syscalls Done for you Lately?</li> <li>MAD24 315 Rethinking the kernel system call entry</li> <li>Linux ABI - Syscalls in Assembly and Calling Assembly from C</li> <li>For x86-64 <code>syscall</code>/<code>sysret</code> instruction, see videos in Arch2001 and its full playlist.</li> </ul>","tags":["concurrency","system-calls"]},{"location":"concurrency/tasklet/","title":"Tasklet","text":"","tags":["concurrency","work-deferring"]},{"location":"concurrency/tasklet/#references","title":"References","text":"","tags":["concurrency","work-deferring"]},{"location":"concurrency/tasklet/#videos","title":"Videos","text":"<ul> <li>The end of tasklets on LWN</li> <li>Modernizing the tasklet API on LWN</li> <li>IRQs: the Hard, the Soft, the Threaded and the Preemptible (37:02 ~ 39:59)</li> </ul>","tags":["concurrency","work-deferring"]},{"location":"concurrency/threaded-irq/","title":"Threaded IRQ","text":"","tags":["concurrency"]},{"location":"concurrency/threaded-irq/#references","title":"References","text":"","tags":["concurrency"]},{"location":"concurrency/threaded-irq/#videos","title":"Videos","text":"<ul> <li>What Every Driver Developer Should Know about RT - Julia Cartwright, National Instruments (08:55)</li> <li>TUT 1279 The four kernel preemption flavors in Linux (17:02)</li> </ul>","tags":["concurrency"]},{"location":"concurrency/time/","title":"Timer and timekeeping","text":"","tags":["concurrency","time"]},{"location":"concurrency/time/#references","title":"References","text":"","tags":["concurrency","time"]},{"location":"concurrency/time/#videos","title":"Videos","text":"<ul> <li>Mentorship Session: The Ticking Beast: a Deep Dive Into Timers, Timekeeping, Tick &amp; Tickless Kernels</li> <li>Timekeeping in the Linux Kernel - Stephen Boyd, Qualcomm Innovation Center</li> </ul>","tags":["concurrency","time"]},{"location":"concurrency/vdso/","title":"vDSO","text":"","tags":["concurrency","system-calls"]},{"location":"concurrency/vdso/#references","title":"References","text":"","tags":["concurrency","system-calls"]},{"location":"concurrency/vdso/#videos","title":"Videos","text":"<ul> <li>Using GNU poke: looking at the vDSO</li> </ul>","tags":["concurrency","system-calls"]},{"location":"concurrency/workqueue/","title":"Workqueue","text":"","tags":["concurrency","work-deferring"]},{"location":"concurrency/workqueue/#references","title":"References","text":"","tags":["concurrency","work-deferring"]},{"location":"concurrency/workqueue/#videos","title":"Videos","text":"<ul> <li>A Journey into Linux Interrupt Handling Bottom Halves - Allen Pais, Microsoft</li> <li>Getting Around to It: Deferred Work in the Linux Kernel - Alison Chaiken, Aurora Innovation (24:02)</li> <li>What You Always Wanted to Know About Workqueues</li> </ul>","tags":["concurrency","work-deferring"]},{"location":"debugging/bpftrace/","title":"bpftrace","text":"","tags":["debugging","tracing"]},{"location":"debugging/bpftrace/#references","title":"References","text":"","tags":["debugging","tracing"]},{"location":"debugging/bpftrace/#videos","title":"Videos","text":"<ul> <li>Linux tracing made simpler with bpftrace - DevConf.CZ 2022</li> <li>An introduction to bpftrace tracing language - DevConf.CZ 2020</li> <li>bpftrace internals - DevConf.CZ 2020</li> </ul>","tags":["debugging","tracing"]},{"location":"debugging/call-trace-analysis/","title":"Call trace analysis","text":"","tags":["debugging"]},{"location":"debugging/call-trace-analysis/#references","title":"References","text":"","tags":["debugging"]},{"location":"debugging/call-trace-analysis/#videos","title":"Videos","text":"<ul> <li>If (oops) { Do_not_panic(); } - Lucky Tyagi, Samsung Semiconductor India R&amp;D Center</li> <li>Tools and Techniques to Debug an Embedded Linux System</li> </ul>","tags":["debugging"]},{"location":"debugging/call-trace-analysis/#links","title":"Links","text":"<ul> <li>The tale of a single register value</li> <li>admin-guide/bug-hunting.html</li> <li>Understanding a Kernel Oops!</li> </ul>","tags":["debugging"]},{"location":"debugging/coccinelle/","title":"Coccinelle","text":"","tags":["debugging","static-analysis"]},{"location":"debugging/coccinelle/#references","title":"References","text":"","tags":["debugging","static-analysis"]},{"location":"debugging/coccinelle/#videos","title":"Videos","text":"<ul> <li>Mentorship Session: Coccinelle: Automating Large-scale Evolution and Bug Finding in C Code</li> <li>SAN19-500K1 Keynote: Coccinelle: 10 Years of Automated Evolution in the Linux Kernel</li> </ul>","tags":["debugging","static-analysis"]},{"location":"debugging/debugfs/","title":"debugfs","text":"<p>This is here to remind that susbsystem-specific debugfs entries do exist and are helpful for debugging, before you have to roll your own.</p>","tags":["debugging"]},{"location":"debugging/debugfs/#references","title":"References","text":"","tags":["debugging"]},{"location":"debugging/debugfs/#videos","title":"Videos","text":"","tags":["debugging"]},{"location":"debugging/debugfs/#links","title":"Links","text":"<ul> <li>DebugFS from kernel doc</li> </ul>","tags":["debugging"]},{"location":"debugging/debugging-overview/","title":"Kernel Debugging Overview","text":"","tags":["debugging"]},{"location":"debugging/debugging-overview/#references","title":"References","text":"","tags":["debugging"]},{"location":"debugging/debugging-overview/#videos","title":"Videos","text":"<ul> <li>Tools and Techniques to Debug an Embedded Linux System - Sergio Prado, Embedded Labworks</li> <li>Tools and Techniques to Debug an Embedded Linux System</li> <li>Mentorship Session: Linux Kernel Debugging Tricks of the Trade</li> <li>Feb 8 at 5pm GMT \"Kernel Debug Stories for Arm\" (in English)</li> </ul>","tags":["debugging"]},{"location":"debugging/debugging-overview/#links","title":"Links","text":"","tags":["debugging"]},{"location":"debugging/decode_stacktrace/","title":"decode_stacktrace.sh","text":"","tags":["debugging"]},{"location":"debugging/decode_stacktrace/#references","title":"References","text":"","tags":["debugging"]},{"location":"debugging/decode_stacktrace/#videos","title":"Videos","text":"<ul> <li>The tale of a single register value</li> </ul>","tags":["debugging"]},{"location":"debugging/decode_stacktrace/#links","title":"Links","text":"<ul> <li>Decoding stack traces in the Linux kernel</li> <li>The tale of a single register value</li> </ul>","tags":["debugging"]},{"location":"debugging/drgn/","title":"drgn","text":"","tags":["debugging","postmoterm"]},{"location":"debugging/drgn/#references","title":"References","text":"","tags":["debugging","postmoterm"]},{"location":"debugging/drgn/#videos","title":"Videos","text":"<ul> <li>Michal Koutn\u00fd Meeting drgn</li> <li>Kernel Recipes 2022 - Powerful and Programmable Kernel Debugging with drgn</li> </ul>","tags":["debugging","postmoterm"]},{"location":"debugging/dynamic-debug/","title":"Dynamic Debug","text":"","tags":["debugging"]},{"location":"debugging/dynamic-debug/#references","title":"References","text":"","tags":["debugging"]},{"location":"debugging/dynamic-debug/#videos","title":"Videos","text":"<ul> <li>SAN19-424 Event Tracing and Pstore with a pinch of Dynamic debug (37:01)</li> </ul>","tags":["debugging"]},{"location":"debugging/dynamic-debug/#links","title":"Links","text":"<ul> <li>dynamic-debug-howto</li> <li>How to use the kernel dynamic debug</li> </ul>","tags":["debugging"]},{"location":"debugging/event-sources/","title":"Events sources","text":"","tags":["debugging","tracing"]},{"location":"debugging/event-sources/#references","title":"References","text":"","tags":["debugging","tracing"]},{"location":"debugging/event-sources/#videos","title":"Videos","text":"<ul> <li>Probes in the kernel, where it goes - Mr HIRAMATSU, Masami</li> <li>Mentorship Session: An Introduction to Linux Tracing and its Concepts</li> </ul>","tags":["debugging","tracing"]},{"location":"debugging/kasan/","title":"KASAN","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/kasan/#references","title":"References","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/kasan/#videos","title":"Videos","text":"<ul> <li>Embedded Fest 2021. Ruslan Bilovol. Linux Kernel hardening techniques</li> <li>Sanitizing the Linux Kernel \u2014 On KASAN and other Dynamic Bug-finding Tools - Andrey Konovalov</li> <li>Mitigating Linux kernel memory corruptions with Arm Memory Tagging | Linux Security Summit 2021</li> <li>Jerome Marchand: KASan or how to get rid of memory corruption</li> </ul>","tags":["debugging","sanitizers"]},{"location":"debugging/kcsan/","title":"KCSAN","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/kcsan/#references","title":"References","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/kcsan/#videos","title":"Videos","text":"<ul> <li>Mentorship Session: The Kernel Concurrency Sanitizer</li> <li>LPC 2020 - Refereed Track - Day 1 (01:59:00) (title: Data-race detection in the Linux Kernel)</li> </ul>","tags":["debugging","sanitizers"]},{"location":"debugging/kcsan/#links","title":"Links","text":"<ul> <li>Concurrency bugs should fear the big bad data-race detector (part 1)</li> <li>Concurrency bugs should fear the big bad data-race detector (part 2)</li> </ul>","tags":["debugging","sanitizers"]},{"location":"debugging/kdump/","title":"kdump","text":"","tags":["debugging","postmoterm"]},{"location":"debugging/kdump/#references","title":"References","text":"","tags":["debugging","postmoterm"]},{"location":"debugging/kdump/#videos","title":"Videos","text":"<ul> <li>Kdump in an hour</li> <li>Postmortem Analysis with Kexec/kdump and Ftrace - Steven Rostedt, Google</li> <li>Kernel Recipes 2015 - Kernel dump analysis - by Adrien Mahieux</li> <li>Marian Marinov - Analyzing Linux kernel crash dumps</li> <li>Kernel dump analysis made quick and easy!</li> </ul>","tags":["debugging","postmoterm"]},{"location":"debugging/kfence/","title":"KFENCE","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/kfence/#references","title":"References","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/kfence/#videos","title":"Videos","text":"<ul> <li>ELISA Summit (Sep 2022)| Using Memory Access Error Detection for Safety Argumentation</li> <li>google/kernel-sanitizers</li> <li>Linux SLUB Allocator Internals and Debugging - KFENCE, Part 4 of 4</li> </ul>","tags":["debugging","sanitizers"]},{"location":"debugging/kgdb/","title":"kgdb","text":"","tags":["debugging"]},{"location":"debugging/kgdb/#references","title":"References","text":"","tags":["debugging"]},{"location":"debugging/kgdb/#videos","title":"Videos","text":"<ul> <li>Debugging the Linux kernel with GDB</li> <li>Debugging the Linux kernel with GDB (Video)</li> <li>KGDB (playlist)</li> <li>Using Serial kdb / kgdb to Debug the Linux Kernel - Douglas Anderson, Google</li> </ul>","tags":["debugging"]},{"location":"debugging/kmemleak/","title":"KMEMLEAK","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/kmemleak/#references","title":"References","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/kmemleak/#videos","title":"Videos","text":"<ul> <li>Embedded Fest 2021. Ruslan Bilovol. Linux Kernel hardening techniques</li> </ul>","tags":["debugging","sanitizers"]},{"location":"debugging/kprobe/","title":"kprobes","text":"","tags":["debugging"]},{"location":"debugging/kprobe/#references","title":"References","text":"","tags":["debugging"]},{"location":"debugging/kprobe/#videos","title":"Videos","text":"<ul> <li>Jiri Wiesner Writing debugging modules</li> <li>Where have all the kprobes gone - Jiri Olsa</li> <li>Kprobes internals - Thomas Bitzberger - LSE Week 2017 (FR)</li> </ul>","tags":["debugging"]},{"location":"debugging/lockdep/","title":"Lockdep","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/lockdep/#references","title":"References","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/lockdep/#videos","title":"Videos","text":"<ul> <li>What Lockdep Does and Doesn't - Byungchul Park, LG Electronics</li> <li>LPC2018 - Recursive read deadlocks and Where to find them</li> </ul>","tags":["debugging","sanitizers"]},{"location":"debugging/pstore/","title":"pstore","text":"","tags":["debugging"]},{"location":"debugging/pstore/#references","title":"References","text":"","tags":["debugging"]},{"location":"debugging/pstore/#videos","title":"Videos","text":"<ul> <li>Recovering the Linux kernel logs from a previous boot with pstore and ramoops</li> <li>SAN19-424 Event Tracing and Pstore with a pinch of Dynamic debug</li> </ul>","tags":["debugging"]},{"location":"debugging/sanitizer-overview/","title":"Sanitizer overview","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/sanitizer-overview/#references","title":"References","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/sanitizer-overview/#videos","title":"Videos","text":"<ul> <li>Kernel Sanitizers Office Hours - POTAPENKO Alexander, VYUKOV Dmitry, COOK Kees, ELVER Marco, MCKE...</li> <li>Mentorship Session: Dynamic Program Analysis for Fun and Profit</li> <li>ELISA Summit (Sep 2022)| Using Memory Access Error Detection for Safety Argumentation</li> <li>google/kernel-sanitizers</li> </ul>","tags":["debugging","sanitizers"]},{"location":"debugging/smatch/","title":"EDITME","text":"","tags":["debugging"]},{"location":"debugging/smatch/#references","title":"References","text":"","tags":["debugging"]},{"location":"debugging/smatch/#videos","title":"Videos","text":"<ul> <li>Mentorship Session: New Ideas for Smatch (Static Analysis)</li> <li>MAD24 216 What Can Static Analysis Do For You Smatch</li> </ul>","tags":["debugging"]},{"location":"debugging/smatch/#links","title":"Links","text":"<ul> <li>Linux Kernel Development - Smatch</li> </ul>","tags":["debugging"]},{"location":"debugging/sparse/","title":"SPARCE","text":"","tags":["debugging","static-analysis"]},{"location":"debugging/sparse/#references","title":"References","text":"","tags":["debugging","static-analysis"]},{"location":"debugging/sparse/#videos","title":"Videos","text":"<ul> <li>Mentorship Session: Static Analysis &amp; Tools</li> <li>Sparse warnings</li> </ul>","tags":["debugging","static-analysis"]},{"location":"debugging/trace-cmd/","title":"trace-cmd","text":"","tags":["debugging","tracing"]},{"location":"debugging/trace-cmd/#references","title":"References","text":"","tags":["debugging","tracing"]},{"location":"debugging/trace-cmd/#videos","title":"Videos","text":"<ul> <li>See what your computer is doing with Ftrace utilities</li> <li>Finding Sources of Latency on your Linux System - Steven Rostedt, VMware</li> <li>Embedded Recipes 2022 - Tracing on embedded boards</li> </ul>","tags":["debugging","tracing"]},{"location":"debugging/tracefs/","title":"tracefs","text":"","tags":["debugging","tracing"]},{"location":"debugging/tracefs/#references","title":"References","text":"","tags":["debugging","tracing"]},{"location":"debugging/tracefs/#videos","title":"Videos","text":"<ul> <li>Steven Rostedt - Learning the Linux Kernel with tracing</li> <li>BKK19-TR04 - Fantastic tracepoints and where to find them</li> <li>LF Live Mentorship Session: Tracing with Ftrace: Critical Tooling for Linux Development</li> <li>Embedded Fest 2021. Steven Rostedt. Dynamic tracing within a busybox environment</li> </ul>","tags":["debugging","tracing"]},{"location":"debugging/tracepoints/","title":"Tracepoints","text":"","tags":["debugging","tracing"]},{"location":"debugging/tracepoints/#references","title":"References","text":"","tags":["debugging","tracing"]},{"location":"debugging/tracepoints/#videos","title":"Videos","text":"<ul> <li>LF Live Mentorship Session: Tracing with Ftrace: Critical Tooling for Linux Development (07:03)</li> <li>BKK19-TR04 - Fantastic tracepoints and where to find them</li> <li>DEF CON 30 - Rex Guo, Junyuan Zeng - Trace me if you can: Bypassing Linux Syscall Tracing</li> <li>SAN19-424 Event Tracing and Pstore with a pinch of Dynamic debug</li> </ul>","tags":["debugging","tracing"]},{"location":"debugging/tracing-overview/","title":"Tracing Overview","text":"","tags":["debugging","tracing"]},{"location":"debugging/tracing-overview/#references","title":"References","text":"","tags":["debugging","tracing"]},{"location":"debugging/tracing-overview/#videos","title":"Videos","text":"<ul> <li>Steven Rostedt on the Linux Kernel's \"Hello World\"</li> <li>Mentorship Session: An Introduction to Linux Tracing and its Concepts</li> <li>Tracing Summit 2022 - State of the Linux Tracers</li> </ul>","tags":["debugging","tracing"]},{"location":"debugging/ubsan/","title":"UBSAN","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/ubsan/#references","title":"References","text":"","tags":["debugging","sanitizers"]},{"location":"debugging/ubsan/#videos","title":"Videos","text":"<ul> <li>Embedded Fest 2021. Ruslan Bilovol. Linux Kernel hardening techniques</li> </ul>","tags":["debugging","sanitizers"]},{"location":"drivers/acpi/","title":"ACPI","text":"<p>This is meant for ACPI's role in the Linux driver model only. Power management related topics in ACPI are put under the <code>pm/</code> directory.</p>","tags":["drivers","acpi"]},{"location":"drivers/acpi/#references","title":"References","text":"","tags":["drivers","acpi"]},{"location":"drivers/acpi/#videos","title":"Videos","text":"<ul> <li>Andy Shevchenko | ACPI overlays for embedded devices</li> <li>Kernel Recipes 2015 - Representing device-tree peripherals in ACPI - by David Woodhouse</li> <li>Collaboration Summit 2013 - Implementing ACPI 5 Features Device Enumeration and PM</li> </ul>","tags":["drivers","acpi"]},{"location":"drivers/acpi/#links","title":"Links","text":"<ul> <li>ACPI Source Language (ASL) Tutorial from Intel.</li> </ul>","tags":["drivers","acpi"]},{"location":"drivers/clocks/","title":"Clocks","text":"","tags":["drivers"]},{"location":"drivers/clocks/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/clocks/#videos","title":"Videos","text":"<ul> <li>Tutorial: What The Clock! - Linux Clock Subsystem Internals - Neil Armstrong, BayLibre SAS</li> <li>Updating and Modernizing Clk (Clock) Drivers - Chen-Yu Tsai, Google</li> <li>Device Tree Tips on Xilinx Wiki</li> </ul>","tags":["drivers"]},{"location":"drivers/device-tree/","title":"Device tree","text":"","tags":["drivers"]},{"location":"drivers/device-tree/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/device-tree/#videos","title":"Videos","text":"<ul> <li>Webinar On-Demand: Demystifying Device Tree for NXP\u00ae i.MX Processors</li> <li>Enabling new hardware on embedded Linux (from schematics to the device tree)</li> <li>Demystifying Device Tree Concepts - Priya Dixit</li> <li>FOSDEM 2024 - From phone hardware to mobile Linux</li> <li>Device Tree: hardware description for everybody !</li> <li>5 ELC-2018 EALE I2C Drivers - Michael Opdenacker: example using I2C bus.</li> </ul>","tags":["drivers"]},{"location":"drivers/device_link/","title":"device_link","text":"","tags":["drivers"]},{"location":"drivers/device_link/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/device_link/#videos","title":"Videos","text":"<ul> <li>Kernel Recipes 2019 - What To Do When Your Device Depends on Another One</li> </ul>","tags":["drivers"]},{"location":"drivers/dma/","title":"DMA","text":"","tags":["drivers"]},{"location":"drivers/dma/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/dma/#videos","title":"Videos","text":"<ul> <li>Taming DMA: Tales Wrestling Memory Corruption - Ahmad Fatoum, Pengutronix</li> <li>Laurent Pinchart - mastering the dma and iommu apis | ELC 2014</li> <li>Linux DMA In Device Drivers</li> <li>Using DMA in a Linux PCI or PCI Express Driver</li> </ul>","tags":["drivers"]},{"location":"drivers/driver-model/","title":"Driver Model","text":"","tags":["drivers"]},{"location":"drivers/driver-model/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/driver-model/#videos","title":"Videos","text":"<ul> <li>5 ELC-2018 EALE I2C Drivers - Michael Opdenacker: example using I2C bus.</li> <li>Embedded Recipes 2019: Herd your socs become a matchmaker</li> <li>Linux Matchmaking: Helping devices and drivers find each other</li> </ul>","tags":["drivers"]},{"location":"drivers/driver-model/#links","title":"Links","text":"<ul> <li>Embedded Linux kernel and driver development training by Bootlin (free access).</li> <li>Working with devicetree: Free, but can only be accessed after registration.</li> </ul>","tags":["drivers"]},{"location":"drivers/dt-schema/","title":"DT-schema","text":"","tags":["drivers"]},{"location":"drivers/dt-schema/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/dt-schema/#videos","title":"Videos","text":"<ul> <li>How to Get Your DT Schema Bindings Accepted in Less Than 10 Iterations - Krzysztof Kozlowski, Linaro</li> </ul>","tags":["drivers"]},{"location":"drivers/firmware/","title":"Firmware","text":"","tags":["drivers"]},{"location":"drivers/firmware/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/firmware/#videos","title":"Videos","text":"<ul> <li>Unravelling How Firmware Interacts with the Linux Subsystem - Smitha T Murthy</li> <li>Getting a Time of Flight Camera Working in Linux, the Full Story from Kernel to User Space</li> </ul>","tags":["drivers"]},{"location":"drivers/firmware/#links","title":"Links","text":"<ul> <li>Linux Kernel Development - Firmware API</li> <li>The <code>linux-firmware</code> repository</li> </ul>","tags":["drivers"]},{"location":"drivers/gpio/","title":"GPIO","text":"","tags":["drivers"]},{"location":"drivers/gpio/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/gpio/#videos","title":"Videos","text":"<ul> <li>Introduction to Pin Muxing and GPIO Control Under Linux - Neil Armstrong, BayLibre</li> <li>Linus Walleij - GPIO and Pin Control for Embedded Systems</li> <li>GPIO for Engineers and Makers</li> <li>Linux GPIO: Evolution and Current State of the User API</li> <li>[ENG] Bartosz Golaszewski: \"New GPIO interface for linux user space\"</li> </ul>","tags":["drivers"]},{"location":"drivers/gpio/#links","title":"Links","text":"<ul> <li>GPIO device tree configuration</li> <li>GPIOLib overview</li> <li>How to control a GPIO in kernel space</li> <li>How to control a GPIO in userspace</li> </ul>","tags":["drivers"]},{"location":"drivers/i2c/","title":"I2C","text":"","tags":["drivers","bus"]},{"location":"drivers/i2c/#references","title":"References","text":"","tags":["drivers","bus"]},{"location":"drivers/i2c/#videos","title":"Videos","text":"<ul> <li>Basics of I2C on Linux - Luca Ceresoli, Bootlin</li> <li>5 ELC-2018 EALE I2C Drivers - Michael Opdenacker</li> <li>Tutorial: Introduction to I2C and SPI: Both In-kernel and In-userspace - Michael Welling</li> </ul>","tags":["drivers","bus"]},{"location":"drivers/i2c/#links","title":"Links","text":"<ul> <li>Custom I2C peripheral in QEMU</li> </ul>","tags":["drivers","bus"]},{"location":"drivers/interrupts/","title":"Interrupts","text":"","tags":["drivers"]},{"location":"drivers/interrupts/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/interrupts/#videos","title":"Videos","text":"<ul> <li>[x86] Linux Kernel Interrupt Delivery Configuration: How the Linux Kernel Interacts with Hardware - Adrian Huang, Lenovo</li> <li>Asahi Linux: PCI power management</li> <li>How Dealing with Modern Interrupt Architectures can Affect Your Sanity</li> <li>LVC20 102 Interrupt sub system in ARM boards using Xilinx Zynq Board</li> <li>Asahi Linux: PCI power management (first hour or so)</li> </ul>","tags":["drivers"]},{"location":"drivers/kernel-modules/","title":"Kernel Modules","text":"","tags":["drivers"]},{"location":"drivers/kernel-modules/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/kernel-modules/#videos","title":"Videos","text":"<ul> <li>2 ELC-2018 EALE Introduction to Kernel Modules - Behan Webster</li> <li>Linux bootcamp: From casual Linux user to kernel hacker - Part 4</li> <li>Understanding the Structure of a Linux Kernel Device Driver</li> <li>Into the Jungle - How to write a Linux kernel driver for any subsystem - Marta Rybczynska</li> </ul>","tags":["drivers"]},{"location":"drivers/pci/","title":"PCI and PCIe","text":"<p>This is a very huge topic spanning 6 generations of specifications (and PCIe 7 has just arrived). Luckily it doesn't take that much effort to start understanding output of <code>lspci</code>.</p>","tags":["drivers","bus"]},{"location":"drivers/pci/#references","title":"References","text":"","tags":["drivers","bus"]},{"location":"drivers/pci/#videos","title":"Videos","text":"<ul> <li>Overview of PCI(e) Subsystem - Kishon Vijay Abraham, Texas Instruments</li> <li>Writing a virtual PCI device + driver from scratch in 2 hours and 23 seconds</li> <li>Some of the videos in Arch4001 (playlist)</li> <li>Linux PCI(e) Driver Tutorial (playlist)</li> <li>GNU/Linux &amp; PCI (Express) (playlist)</li> <li>LIS25 207 How not to write PCIe controller drivers in Linux Kernel</li> </ul>","tags":["drivers","bus"]},{"location":"drivers/pci/#links","title":"Links","text":"<ul> <li>Debugging PCIe Issues using lspci and setpci</li> <li>PCIe Tips and Tricks from Xilinx Wiki</li> </ul>","tags":["drivers","bus"]},{"location":"drivers/pinctrl/","title":"Pinctrl","text":"","tags":["drivers"]},{"location":"drivers/pinctrl/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/pinctrl/#videos","title":"Videos","text":"<ul> <li>Introduction to Pin Muxing and GPIO Control Under Linux - Neil Armstrong, BayLibr</li> <li>Tutorial: Spelunking for Hardware Data - Matt Porter, Konsulko Group</li> <li>Linus Walleij - GPIO and Pin Control for Embedded Systems</li> </ul>","tags":["drivers"]},{"location":"drivers/platform-bus/","title":"Platform Bus","text":"","tags":["drivers","bus"]},{"location":"drivers/platform-bus/#references","title":"References","text":"","tags":["drivers","bus"]},{"location":"drivers/platform-bus/#videos","title":"Videos","text":"<ul> <li>BoF: Early Platform Drivers in Linux Kernel - Bartosz Golaszewski, BayLibre (first 5 minutes)</li> </ul>","tags":["drivers","bus"]},{"location":"drivers/regmap/","title":"regmap","text":"","tags":["drivers"]},{"location":"drivers/regmap/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/regmap/#videos","title":"Videos","text":"<ul> <li>Simplify and Reuse Your Driver's Code with Regmaps - Ioan Adrian Ratiu, Collabora Ltd</li> </ul>","tags":["drivers"]},{"location":"drivers/spi/","title":"SPI","text":"","tags":["drivers","bus"]},{"location":"drivers/spi/#references","title":"References","text":"","tags":["drivers","bus"]},{"location":"drivers/spi/#videos","title":"Videos","text":"<ul> <li>6 ELC-2018 EALE SPI Drivers - Michael Welling</li> <li>Tutorial: Introduction to I2C and SPI: Both In-kernel and In-userspace - Michael Welling</li> <li>Groking the Linux SPI Subsystem - Matt Porter, Konsulko</li> </ul>","tags":["drivers","bus"]},{"location":"drivers/spi/#links","title":"Links","text":"<ul> <li>Custom SPI peripheral in QEMU</li> </ul>","tags":["drivers","bus"]},{"location":"drivers/udev/","title":"udev","text":"","tags":["drivers"]},{"location":"drivers/udev/#references","title":"References","text":"","tags":["drivers"]},{"location":"drivers/udev/#videos","title":"Videos","text":"<ul> <li>Introducing Udev on Oracle Linux</li> <li>[ENG] Christian Brauner: \"Making the Kernel and Udev Namespace Aware\" / #LinuxPiter</li> </ul>","tags":["drivers"]},{"location":"drivers/udev/#links","title":"Links","text":"<ul> <li>Xilinx Wiki/Linux Loadable Kernel Modules</li> <li>Dynamic kernel device management with udev</li> <li>An introduction to Udev: The Linux subsystem for managing device events</li> <li>udev: Device Manager for the Linux Kernel in Userspace</li> <li>udev: Function Flow for KOBJECT_UEVENT kernel group message</li> </ul>","tags":["drivers"]},{"location":"drivers/usb/","title":"USB Bus","text":"","tags":["drivers","bus"]},{"location":"drivers/usb/#references","title":"References","text":"","tags":["drivers","bus"]},{"location":"drivers/usb/#videos","title":"Videos","text":"<ul> <li>A Tour of USB Device Controller (UDC) in Linux - Herv\u00e9 Codina, Bootlin</li> <li>Debugging Usually Slightly Broken (USB) Devices and Drivers - Krzysztof Opasiak, Samsung</li> <li>Watch Linux kernel developer write a USB driver from scratch in just 3h for Apple Xserve front-panel</li> </ul>","tags":["drivers","bus"]},{"location":"drm/apitrace/","title":"apitrace","text":"","tags":["graphics","debugging"]},{"location":"drm/apitrace/#references","title":"References","text":"","tags":["graphics","debugging"]},{"location":"drm/apitrace/#videos","title":"Videos","text":"<ul> <li>v3dv: experience using gfxreconstruct/apitrace traces for performance evaluation</li> <li>graphics performance analysis with frameretrace: a responsive ui for apitrace - mark janes, intel</li> <li>measuring and improving opengl performance</li> </ul>","tags":["graphics","debugging"]},{"location":"drm/apitrace/#links","title":"Links","text":"<ul> <li>apitrace/apitrace</li> </ul>","tags":["graphics","debugging"]},{"location":"drm/display-pipeline/","title":"Display Pipeline","text":"","tags":["graphics","kms"]},{"location":"drm/display-pipeline/#references","title":"References","text":"","tags":["graphics","kms"]},{"location":"drm/display-pipeline/#videos","title":"Videos","text":"<ul> <li>ELCE 2022: Navigating the Linux Graphics Stack</li> <li>Walking Through the Linux-Based Graphics Stack - Paul Kocialkowski, Bootlin</li> <li>Graphics: A Frame's Journey | FOSDEM 2023</li> </ul>","tags":["graphics","kms"]},{"location":"drm/display-pipeline/#link","title":"Link","text":"<ul> <li>An introduction to the Linux graphics stack</li> <li>The Linux graphics stack in a nutshell, part 1</li> <li>The Linux graphics stack in a nutshell, part 2</li> <li>DRM KMS overview</li> </ul>","tags":["graphics","kms"]},{"location":"drm/dp-mst/","title":"DisplayPort MST","text":"","tags":["graphics"]},{"location":"drm/dp-mst/#references","title":"References","text":"","tags":["graphics"]},{"location":"drm/dp-mst/#videos","title":"Videos","text":"<ul> <li>XDC 2022 | Introduction to DisplayPort MST support on Linux | Lyude Paul</li> <li>XDC 2022 Demo | Progress of MST improvement from AMD | Wayne Lin</li> </ul>","tags":["graphics"]},{"location":"drm/dp/","title":"DisplayPort","text":"","tags":["graphics","display-interface"]},{"location":"drm/dp/#references","title":"References","text":"","tags":["graphics","display-interface"]},{"location":"drm/dp/#videos","title":"Videos","text":"<ul> <li>What is DisplayPort (DP)?</li> <li>TI Precision Labs - Video Interface: Understanding DP Link Training</li> <li>Essentials of DisplayPort Protocols at HBR3 8.1 Gb/s Link Rates</li> <li>Display support on Embedded Systems: Linux implementation &amp; limitations (Neil Armstrong, Linaro)</li> <li>A Journey through Upstream Atomic KMS to Achieve DP Compliance - Manasi Navare, Intel</li> </ul>","tags":["graphics","display-interface"]},{"location":"drm/drm-ci/","title":"DRM-CI","text":"","tags":["graphics","testing"]},{"location":"drm/drm-ci/#references","title":"References","text":"","tags":["graphics","testing"]},{"location":"drm/drm-ci/#videos","title":"Videos","text":"<ul> <li>Quickly Test Your Kernel with GitLab CI - Helen Koike, Collabora</li> </ul>","tags":["graphics","testing"]},{"location":"drm/drm-ci/#links","title":"Links","text":"<ul> <li>Automated testing of the DRM subsystem</li> <li>DRM-CI: A GitLab-CI pipeline for Linux kernel testing</li> </ul>","tags":["graphics","testing"]},{"location":"drm/drm-kunit/","title":"DRM KUnit Tests","text":"","tags":["graphics","testing"]},{"location":"drm/drm-kunit/#references","title":"References","text":"","tags":["graphics","testing"]},{"location":"drm/drm-kunit/#videos","title":"Videos","text":"<ul> <li>XDC 2023 | October 17 | Status of KUnit tests on DRM subsystem | Arthur Grillo, Carlos Gallo Filho</li> <li>XDC 2022 | KUnit sorcery and the uncanny nature of FPU in the DRM | I. Basso &amp; M. Canal &amp; M. Lemes</li> </ul>","tags":["graphics","testing"]},{"location":"drm/drm/","title":"DRM","text":"<p>This is intended for parts of the kernel that are related to the rendering part of the GPU driver, but I haven't been able to figure out what this topic should be called. Simply calling it DRM might be confusing since KMS is also a part of DRM and it's about displaying, but let's keep it for now.</p>","tags":["graphics"]},{"location":"drm/drm/#references","title":"References","text":"","tags":["graphics"]},{"location":"drm/drm/#videos","title":"Videos","text":"<ul> <li>I want to make a GPU (Playlist)</li> <li>Overview of a Modern DRM Driver - Matt Coster, Imagination Technologies</li> <li>XDC 2023 | October 19 | With great power comes less responsibility | B. Brezillon, D. Krummrich</li> <li>Everything Great about Upstream Graphics - Daniel Vetter, Intel</li> <li>Why Are GPUs (Not) Fast - A Trip Through the Driver Stack - Lucas Stach, Pengutronix</li> <li>Mesa3D Unveiled: From glDrawArrays to GPU Magic - Christian Gmeiner, Igalia</li> </ul>","tags":["graphics"]},{"location":"drm/edid/","title":"EDID","text":"","tags":["graphics"]},{"location":"drm/edid/#references","title":"References","text":"","tags":["graphics"]},{"location":"drm/edid/#videos","title":"Videos","text":"<ul> <li>Extended Display Identification Data (EDID): Problems, Pitfalls and Complications - Hans Verkuil</li> </ul>","tags":["graphics"]},{"location":"drm/hdmi/","title":"HDMI","text":"","tags":["graphics","display-interface"]},{"location":"drm/hdmi/#references","title":"References","text":"","tags":["graphics","display-interface"]},{"location":"drm/hdmi/#videos","title":"Videos","text":"<ul> <li>Display support on Embedded Systems: Linux implementation &amp; limitations (Neil Armstrong, Linaro)</li> <li>HDMI 4k Video: Lessons Learned - Hans Verkuil, Cisco Systems Norway</li> <li>HDMI CEC: What? Why? How?</li> </ul>","tags":["graphics","display-interface"]},{"location":"drm/igt-gpu-tools/","title":"igt-gpu-tools","text":"","tags":["graphics","testing"]},{"location":"drm/igt-gpu-tools/#references","title":"References","text":"","tags":["graphics","testing"]},{"location":"drm/igt-gpu-tools/#videos","title":"Videos","text":"<ul> <li>drm/igt-gpu-tools</li> <li>XDC 2020 | VKMS improvements using IGT GPU Tools</li> <li>IGT GPU Tools - the past, the present, the future</li> </ul>","tags":["graphics","testing"]},{"location":"drm/igt-gpu-tools/#links","title":"Links","text":"<ul> <li>drm/igt-gpu-tools</li> </ul>","tags":["graphics","testing"]},{"location":"drm/kms-atomic/","title":"KMS","text":"","tags":["graphics","kms"]},{"location":"drm/kms-atomic/#references","title":"References","text":"","tags":["graphics","kms"]},{"location":"drm/kms-atomic/#videos","title":"Videos","text":"<ul> <li>Kernel Locking Engineering - Daniel Vetter, Intel</li> <li>\"Everything Awesome about GPU Drivers\" - Daniel Vetter (LCA 2020) (04:41)</li> <li>FOSDEM 2015 | Atomic Mode-Setting</li> <li>A Journey through Upstream Atomic KMS to Achieve DP Compliance - Manasi Navare, Intel</li> <li>XDC2015 - Daniel Vetter - Atomic Modesetting for Drivers</li> <li>XDC 2019 | Enabling 8K displays - A story of 33M pixels, 2 CRTCs and no Tears! - Manasi Navare</li> </ul>","tags":["graphics","kms"]},{"location":"drm/kms-atomic/#links","title":"Links","text":"<ul> <li>Atomic mode setting design overview, part 1</li> <li>Atomic mode setting design overview, part 2</li> <li>Atomic KMS/DRM on multiple displays is hindered by driver-global serialization of atomic commits</li> </ul>","tags":["graphics","kms"]},{"location":"drm/kms-bridges/","title":"KMS Bridges","text":"","tags":["graphics","kms"]},{"location":"drm/kms-bridges/#references","title":"References","text":"","tags":["graphics","kms"]},{"location":"drm/kms-bridges/#videos","title":"Videos","text":"<ul> <li>Diving deep into Linux DRM bridge chaining</li> <li>Linux DRM Bridge: A Potential Replacer for the DRM Encoder to Standardise a Single API? | Jagan Teki</li> <li>Standardising Linux DRM driver implementations by interfacing DRM Bridge as a single API</li> <li>XDC 2022 | Runtime display switch implementation in a Linux DRM bridge subsystem | Jagan Teki</li> <li>LVC21F-223 Demystifying Linux MIPI DSI Bridge Subsystem</li> </ul>","tags":["graphics","kms"]},{"location":"drm/kms/","title":"KMS","text":"","tags":["graphics","kms"]},{"location":"drm/kms/#references","title":"References","text":"","tags":["graphics","kms"]},{"location":"drm/kms/#videos","title":"Videos","text":"<ul> <li>Getting pixels on screen on Linux: introduction to Kernel Mode Setting - Simon Ser</li> <li>A Current Overview of the DRM KMS Driver-Side APIs - Paul Kocialkowski, Bootlin</li> <li>ELCE 2022: Navigating the Linux Graphics Stack</li> <li>Graphics: A Frame's Journey | FOSDEM 2023</li> <li>Kernel Recipes 2017 - An introduction to the Linux DRM subsystem - Maxime Ripard</li> <li>Kernel Recipes 2015 - Anatomy of an Atomic KMS Driver - by Laurent Pinchart</li> <li>XDC 2019 | A case study on frame presentation from user space via KMS - Heinrich Fink</li> <li>LVC21F-108 Advanced KMS</li> <li>Demystifying Linux MIPI DSI Subsystem - Jagan Teki, Amarula Solutions</li> <li>Embedded Linux Conference 2013 - Anatomy of an Embedded KMS Driver</li> <li>Linux DRM: New Picture Processing API</li> </ul>","tags":["graphics","kms"]},{"location":"drm/kms/#links","title":"Links","text":"<ul> <li>DRM KMS overview on ST wiki</li> <li>Kernel Mode Setting (KMS) in Linux kernel documentation.</li> <li>Display Driver Stack from AMD.</li> <li>DRM/KMS Kernel Subsystem also from AMD.</li> </ul>","tags":["graphics","kms"]},{"location":"drm/libdrm/","title":"libdrm","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/libdrm/#references","title":"References","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/libdrm/#videos","title":"Videos","text":"<ul> <li>Getting pixels on screen on Linux: introduction to Kernel Mode Setting - Simon Ser</li> </ul>","tags":["graphics","userspace-graphics"]},{"location":"drm/libinput/","title":"libinput","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/libinput/#references","title":"References","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/libinput/#videos","title":"Videos","text":"<ul> <li>\"Write a single library to handle all input devices, it'll be easy\" they said...</li> </ul>","tags":["graphics","userspace-graphics"]},{"location":"drm/lvds/","title":"LVDS","text":"","tags":["graphics","display-interface"]},{"location":"drm/lvds/#references","title":"References","text":"","tags":["graphics","display-interface"]},{"location":"drm/lvds/#videos","title":"Videos","text":"<ul> <li>LVDS Display Panel</li> <li>Video signal transmission between motherboard and Tcon via LVDS. VESA and JEIDA standard</li> <li>Testing and Remote Access to Embedded System DPI/LVDS Display Output - Marek Vasut</li> <li>What is LVDS ... Old laptop Screen reuse</li> </ul>","tags":["graphics","display-interface"]},{"location":"drm/mesa/","title":"Mesa","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/mesa/#references","title":"References","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/mesa/#videos","title":"Videos","text":"<ul> <li>Mesa3D Unveiled: From glDrawArrays to GPU Magic - Christian Gmeiner, Igalia</li> <li>Embedded Graphics Drivers in Mesa - Neil Roberts, Igalia</li> <li>Linux Graphics 101 - Rohan Garg</li> </ul>","tags":["graphics","userspace-graphics"]},{"location":"drm/mutter/","title":"Mutter","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/mutter/#references","title":"References","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/mutter/#videos","title":"Videos","text":"<ul> <li>A Look Inside Mutter / Gnome Shell</li> </ul>","tags":["graphics","userspace-graphics"]},{"location":"drm/rendering-pipeline/","title":"Rendering pipeline","text":"","tags":["graphics"]},{"location":"drm/rendering-pipeline/#references","title":"References","text":"","tags":["graphics"]},{"location":"drm/rendering-pipeline/#videos","title":"Videos","text":"<ul> <li>The Linux 3D graphics stack with Alyssa Rosenzweig</li> <li>Open Source Graphics 101: Getting Started - Boris Brezillon, Collabora</li> <li>Thomas Zimmermann The Linux Graphics Stack in a Nutshell</li> </ul>","tags":["graphics"]},{"location":"drm/rgb/","title":"RGB","text":"","tags":["graphics","display-interface"]},{"location":"drm/rgb/#references","title":"References","text":"","tags":["graphics","display-interface"]},{"location":"drm/rgb/#videos","title":"Videos","text":"<ul> <li>pico-rgb2hmi - video converter - Marcelo Lorenzati - Commodore Users Europe - 17th of Sep. 2022</li> <li>Image interfaces in LCD modules explanation - LVDS, RGB, MIPI, Vx1, eDP interfaces explanation</li> </ul>","tags":["graphics","display-interface"]},{"location":"drm/simpledrm/","title":"simpledrm","text":"","tags":["graphics","kms"]},{"location":"drm/simpledrm/#references","title":"References","text":"","tags":["graphics","kms"]},{"location":"drm/simpledrm/#videos","title":"Videos","text":"<ul> <li>Trading fbdev for DRM, No Returns Accepted - Geert Uytterhoeven, Glider bv</li> <li>openSUSE Conference 2022 - simpledrm - a kernel fbdev replacement</li> <li>Modern Graphics from Boot to Shutdown and Retiring fbdev</li> </ul>","tags":["graphics","kms"]},{"location":"drm/vga/","title":"VGA","text":"","tags":["graphics","display-interface"]},{"location":"drm/vga/#references","title":"References","text":"","tags":["graphics","display-interface"]},{"location":"drm/vga/#videos","title":"Videos","text":"<ul> <li>M14 - 3 - Basic Operation of a CRT Monitor</li> <li>M14 - 4 - VGA - Horizontal Synchronization</li> <li>M14 - 5 - VGA - Vertical Synchronization</li> <li>M14 - 6 - VGA - Pixel Clock Rate</li> <li>Nandland Go Board Project 9 - Introduction to VGA</li> </ul>","tags":["graphics","display-interface"]},{"location":"drm/vkms/","title":"VKMS","text":"","tags":["graphics","kms"]},{"location":"drm/vkms/#references","title":"References","text":"","tags":["graphics","kms"]},{"location":"drm/vkms/#videos","title":"Videos","text":"<ul> <li>XDC 2023 | October 18 | Status Update of the VKMS DRM driver | Ma\u00edra Canal and Melissa Wen</li> <li>XDC 2021 | Emulating Virtual Hardware in VKMS | Sumera Priyadarsini</li> <li>Rodrigo Siqueira &amp; Haneen Mohamed - VKMS</li> <li>XDC 2020 | VKMS improvements using IGT GPU Tools</li> </ul>","tags":["graphics","kms"]},{"location":"drm/wayland-protocol/","title":"EDITME","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/wayland-protocol/#references","title":"References","text":"","tags":["graphics","userspace-graphics"]},{"location":"drm/wayland-protocol/#videos","title":"Videos","text":"<ul> <li>Why YOU should write a Wayland compositor \u2013 Victoria Brekenfeld \u2013 HiP22 Berlin</li> <li>\"Write a single library to handle all input devices, it'll be easy\" they said...</li> </ul>","tags":["graphics","userspace-graphics"]},{"location":"pci/aer/","title":"Advanced Error Reporting (AER)","text":"","tags":["pcie"]},{"location":"pci/aer/#registers","title":"Registers","text":"","tags":["pcie"]},{"location":"pci/aer/#in-pci-express-capability-structure","title":"In PCI Express Capability Structure","text":"<pre><code>Capabilities: [c0] Express (v2) Endpoint, MSI 00\n        DevCap: MaxPayload 512 bytes, PhantFunc 0, Latency L0s &lt;1us, L1 unlimited\n                ExtTag- AttnBtn- AttnInd- PwrInd- RBE+ FLReset+ SlotPowerLimit 0W\n        DevCtl: CorrErr- NonFatalErr- FatalErr- UnsupReq-\n                RlxdOrd+ ExtTag- PhantFunc- AuxPwr- NoSnoop+ FLReset-\n                MaxPayload 256 bytes, MaxReadReq 512 bytes\n        DevSta: CorrErr- NonFatalErr- FatalErr- UnsupReq- AuxPwr- TransPend-\n</code></pre> <p>The <code>DevCtl</code> shows if reporting of Correctable Errors (<code>CorrErr</code>), Non-Fatal Uncorrectable Errors (<code>NonFatalErr</code>), and Fatal Uncorrectable Errors are enabled. The <code>DevSta</code> show if an error of that class has ever occured.</p>","tags":["pcie"]},{"location":"pci/aer/#in-pci-express-capability-structure-root","title":"In PCI Express Capability Structure (Root)","text":"<p>Root port being the target of the Error Messages has additional things to control:</p> <pre><code>Capabilities: [40] Express (v2) Root Port (Slot+), MSI 00\n        DevCtl: CorrErr- NonFatalErr- FatalErr- UnsupReq-\n                RlxdOrd- ExtTag- PhantFunc- AuxPwr- NoSnoop-\n                MaxPayload 128 bytes, MaxReadReq 128 bytes\n        DevSta: CorrErr- NonFatalErr- FatalErr- UnsupReq- AuxPwr+ TransPend-\n        ...\n        RootCap: CRSVisible-\n        RootCtl: ErrCorrectable- ErrNon-Fatal- ErrFatal- PMEIntEna+ CRSVisible-\n        RootSta: PME ReqID 0000, PMEStatus- PMEPending-\n</code></pre> <p>The <code>RootCtl</code> control if the root port should signal the platform when the respective error class has happended.</p>","tags":["pcie"]},{"location":"pci/aer/#in-aer-capability-structure","title":"In AER Capability Structure","text":"<pre><code>Capabilities: [100 v2] Advanced Error Reporting\n        UESta:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-\n        UEMsk:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-\n        UESvrt: DLP+ SDES- TLP- FCP+ CmpltTO- CmpltAbrt- UnxCmplt- RxOF+ MalfTLP+ ECRC- UnsupReq- ACSViol-\n        CESta:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr-\n        CEMsk:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr+\n        AERCap: First Error Pointer: 00, ECRCGenCap+ ECRCGenEn- ECRCChkCap+ ECRCChkEn-\n                MultHdrRecCap- MultHdrRecEn- TLPPfxPres- HdrLogCap-\n        HeaderLog: 00000000 00000000 00000000 00000000\n</code></pre> <p>The <code>UE</code>, <code>CE</code> stands for Uncorrectable Error and Correctable Error respecively:</p> <ol> <li><code>UESta</code>, <code>CESta</code>: show if the given error has occured.</li> <li><code>UEMsk</code>, <code>CEMsk</code>: mask an Error so that the function doesn't report it to root.</li> <li><code>UESvrt</code>: bits to specify if a Uncorrectable Error should be Fatal or Non-Fatal.</li> </ol> <p>For trying to recover what has happend during the error, there are <code>HeaderLog</code> and <code>First Error Pointer</code>:</p> <ol> <li><code>HeaderLog</code>: records the header of the TLP that triggers this Error. Note if an Error is masked, its header won't get logged.</li> <li><code>First Error Pointer</code>: offset into the <code>UESta</code> indicating which Uncorrectable Error happened first.</li> </ol> <p>And if the device is <code>MultHdrRecCap</code> capable and it is enabled by <code>MultHdrRecEn</code>, then clearing the bit in the <code>UESta</code> pointed by the <code>First Error Pointer</code> will make the <code>First Error Pointer</code> point to the next Uncorrectable Error, and the <code>HeaderLog</code> will update accordingly. This can be done repeatedly until the <code>First Error Pointer</code> points to a bit not set, meaning it already reaches its limit. How many Uncorrectable Error a function can track is implementation-specific.</p> <p>Note that Header Log Overflow is also an error of its own. It's a Correctable Error.</p>","tags":["pcie"]},{"location":"pci/aer/#in-aer-capability-structure-root","title":"In AER Capability Structure (Root)","text":"<p>A root port has additional <code>RootCmd</code>, <code>RootSta</code> and <code>ErrorSrc</code> for indicating an error has happened downstream:</p> <pre><code>Capabilities: [100 v1] Advanced Error Reporting\n        UESta:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-\n        UEMsk:  DLP- SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF- MalfTLP- ECRC- UnsupReq- ACSViol-\n        UESvrt: DLP+ SDES- TLP- FCP- CmpltTO- CmpltAbrt- UnxCmplt- RxOF+ MalfTLP+ ECRC- UnsupReq- ACSViol-\n        CESta:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr-\n        CEMsk:  RxErr- BadTLP- BadDLLP- Rollover- Timeout- AdvNonFatalErr+\n        AERCap: First Error Pointer: 00, ECRCGenCap- ECRCGenEn- ECRCChkCap- ECRCChkEn-\n                MultHdrRecCap- MultHdrRecEn- TLPPfxPres- HdrLogCap-\n        HeaderLog: 00000000 00000000 00000000 00000000\n        RootCmd: CERptEn- NFERptEn- FERptEn-\n        RootSta: CERcvd- MultCERcvd- UERcvd- MultUERcvd-\n                 FirstFatal- NonFatalMsg- FatalMsg- IntMsg 0\n        ErrorSrc: ERR_COR: 0000 ERR_FATAL/NONFATAL: 0000\n</code></pre> <ol> <li><code>ErrorSrc</code>: BDF of the downstream device where an Error originate.</li> <li><code>RootSta</code>:<ul> <li><code>CERcvd</code>, <code>UERcvd</code>: an Correctable Error/Uncorrectable Error has occured downstream.</li> <li><code>MultCERcvd</code>, <code>MultUERcvd</code>: multiple Correctable Errors/Uncorrectable Errors have occurred downstream.</li> <li><code>INtMsg</code>: interrupt number in the MSI-X table to signal the root.</li> </ul> </li> <li><code>RootCmd</code>: whether to trigger an interrupt on Correctable/Non-Fatal/Fatal Errors.</li> </ol>","tags":["pcie"]},{"location":"pci/aer/#error-severity-622","title":"Error Severity (6.2.2)","text":"","tags":["pcie"]},{"location":"pci/aer/#correctable-6221","title":"Correctable (6.2.2.1)","text":"<p>Errors that the hardware can fix by itself. For example, an error in LCRC can be handled by replaying the TLP in data link layer.</p>","tags":["pcie"]},{"location":"pci/aer/#uncorrectable-6222","title":"Uncorrectable (6.2.2.2)","text":"<p>Further classified into 2 categories: non-fatal and fatal.</p>","tags":["pcie"]},{"location":"pci/aer/#uncorrectable-non-fatal","title":"Uncorrectable (Non-Fatal)","text":"<p>Errors that hardware cannot fix by itself, but the scope of the errors is limited to a inidividual transactions. The Link remains usable.</p> <p>For example, recieving a Completion Timeout from a function doesn't really impact the Link. It could issue specific to that target function, but. In this case only traffic to that function is under impact.</p>","tags":["pcie"]},{"location":"pci/aer/#uncorrectable-fatal","title":"Uncorrectable (Fatal)","text":"<p>The Link is considered not functional and needs recovering.</p>","tags":["pcie"]},{"location":"pci/aer/#change-in-severity","title":"Change in severity","text":"","tags":["pcie"]},{"location":"pci/aer/#the-advisory-non-fatal-error-62324","title":"The \"Advisory\" Non-Fatal Error (6.2.3.2.4)","text":"<p>In some cases a Non-Fatal Uncorrectable Error has to be reported as Correctable Error.</p> <p>This could simply because continuation of working is possible even though there's no unified way to fix that scenario, or because multiple Non-Fatal Uncorrectable Errors would be reported in different places, confusing the error logging, so it's better to lower some Non-Fatal Uncorrectable Errors into Correctable Errors instead, to make the error reporting more meaningful.</p>","tags":["pcie"]},{"location":"pci/aer/#the-uesvrt-register","title":"The <code>UESvrt</code> register","text":"<p>This register in the AER capability structure control which Uncorrectable Error are the Fatal ones. The severity of a Uncorrectable Error can be change by programming this register.</p>","tags":["pcie"]},{"location":"pci/aer/#reporting-errors","title":"Reporting errors","text":"","tags":["pcie"]},{"location":"pci/aer/#by-error-message-6232","title":"By Error Message (6.2.3.2)","text":"<p>It is a Message TLP implicitly routed to root.</p>","tags":["pcie"]},{"location":"pci/aer/#by-completion-status-field-6231","title":"By Completion Status field (6.2.3.1)","text":"<p>By setting the Completion Status field. Note that not all abnormal completion status trigger the error. Some of them are advisory cases.</p>","tags":["pcie"]},{"location":"pci/aer/#references","title":"References","text":"","tags":["pcie"]},{"location":"pci/aer/#videos","title":"Videos","text":"<ul> <li>Everything You Wanted to Know About PCIe But Were Too Proud to Ask (19:53)</li> <li>PCI Express HW Fault Management (RAS) Solution Implementation considerations (08:11)</li> </ul>","tags":["pcie"]},{"location":"pci/aer/#links","title":"Links","text":"<ul> <li>5.6. PCI Express Capability Structure, Stratix V Avalon-ST Interface with SR-IOV PCIe Solutions: User Guide</li> <li>PCIe error logging and handling on a typical SoC</li> </ul>","tags":["pcie"]},{"location":"pci/d-states/","title":"D-States","text":"<p>See references.</p>","tags":["pcie","power-management"]},{"location":"pci/d-states/#registers","title":"Registers","text":"","tags":["pcie","power-management"]},{"location":"pci/d-states/#in-power-management-capability","title":"In Power Management Capability","text":"<pre><code>Capabilities: [80] Power Management version 3\n        Flags: PMEClk- DSI- D1- D2- AuxCurrent=0mA PME(D0-,D1-,D2-,D3hot-,D3cold-)\n        Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=0 PME-\n</code></pre> <ol> <li><code>D1</code> and <code>D2</code>: whether or not the function support <code>D1</code> and <code>D2</code>. </li> <li><code>PME</code>: the states where a function is capable of sending PME.</li> <li><code>Status</code>: this is the <code>PMCSR</code> register:<ol> <li><code>D0</code>: the device is in <code>D0</code> state.</li> <li><code>NoSoftRst</code>: when resuming from <code>D3Hot</code>, the function can goes back to <code>D0</code> (initialized), instead of having to go to <code>D0</code> (uninitialized) first (i.e. no need to do soft reset when transitioning from <code>D3Hot</code> to <code>D0</code>).</li> <li><code>PME-Enable</code>: whether or not the function is allowed to send PME.</li> <li><code>DSel</code> and <code>DScale</code>: TODO.</li> <li><code>PME</code>: has any PME from the function occured?</li> </ol> </li> </ol>","tags":["pcie","power-management"]},{"location":"pci/d-states/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/d-states/#videos","title":"Videos","text":"","tags":["pcie","power-management"]},{"location":"pci/d-states/#links","title":"Links","text":"<ul> <li>1.2. Native PCI Power Management</li> <li>Device power states</li> <li>PCIe device states, Qualcomm Linux Interfaces Guide</li> <li>2.15.1 Device Power Management, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): for D-state transition diagram.</li> <li>2.15.3 Relationship Between Device and Link Power States, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): an example how D-states are related to the L-states.</li> <li>Power Management Control And Status Register, 13th Generation Intel\u00ae Core\u2122 Processor Datasheet, Volume 2 of 2: for <code>PMCSR</code> definitions.</li> <li><code>include/uapi/linux/pci_regs.h</code>: for macros and register definition in Linux.</li> <li>3.7. Power Management, F-Tile Avalon\u00ae Streaming Intel\u00ae FPGA IP for PCI Express* User Guide: an example how D-states are related to the L-states.</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/d-states/#specification","title":"Specification","text":"<ul> <li>5.3.1 Device Power Management States (D-States) of a Function</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/d3cold/","title":"D3Cold","text":"<p>Configuration space is not accessible in <code>D3Cold</code>. Either there's a <code>WAKE#</code> or beacon to signal the need of main power, or there needs to be other platform-specific ways to power up the function again to <code>D0</code> (usually through ACPI support.)</p>","tags":["pcie","power-management"]},{"location":"pci/d3cold/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/d3cold/#links","title":"Links","text":"<ul> <li>[PATCH -v7 4/4] PCIe, PM, Add PCIe runtime D3cold support</li> <li>1.2. Native PCI Power Management</li> <li>Firmware requirements for D3cold</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/d3cold/#specification","title":"Specification","text":"<ul> <li>5.3.1.4.2 D3cold State</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l0/","title":"The L0 state","text":"<p>This is the normal operational state.</p>","tags":["pcie","pcie-ltssm","power-management"]},{"location":"pci/l0/#references","title":"References","text":"","tags":["pcie","pcie-ltssm","power-management"]},{"location":"pci/l0/#other-references","title":"Other references","text":"<ul> <li>4.2.6.5 L0</li> </ul>","tags":["pcie","pcie-ltssm","power-management"]},{"location":"pci/l0s/","title":"L0s state","text":"<p><code>L0s</code> is ASPM-specific. Note that <code>L0s</code> state is direction specific. It is possible on the Tx direction the Link is in L0s, and the Rx direction is not.</p>","tags":["pcie","power-management"]},{"location":"pci/l0s/#entering-l0s-state","title":"Entering L0s state","text":"<p>Send EIOS and stay in Electrical Idle for certain period of time.</p>","tags":["pcie","power-management"]},{"location":"pci/l0s/#exit-l0s-state","title":"Exit L0s state","text":"<p>Send EIEOS first, and then certain number of FTS ordered set, and send an SOS. How many FTS is need has already described in the TS1 and TS2 (in the <code>N_FTS</code>) during the Link Training.</p> <p>Note that if the receiver is not able to achieve bit lock and symbol lock in time, both directions in the Link will go to Recovery.</p>","tags":["pcie","power-management"]},{"location":"pci/l0s/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/l0s/#videos","title":"Videos","text":"","tags":["pcie","power-management"]},{"location":"pci/l0s/#links","title":"Links","text":"<ul> <li>2.15.2 Link State Power Management, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): for the ASPM L-state diagram.</li> <li>The Importance of Efficient SSD Power Management, PHISON Blog: for Link State diagram.</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l0s/#specification","title":"Specification","text":"<ul> <li>4.2.6.6 L0s</li> <li>5.4.1.1 L0s ASPM State</li> <li>5.4.1.3 ASPM Configuration</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l1-aspm/","title":"ASPM L1","text":"<p>Note that for <code>L1</code> state, other than directed by software through the Configuration Space, some hardware is capable of negotiating with each other and enter <code>L1</code> state autonomously, without letting software know. This capabiliy is called the Active-state power management, or ASPM. </p> <p>To distinguish those 2 cases (software-directed vs. autonomous), sometimes the software-directed <code>L1</code> state is called PCI-PM L1, and the autonomously entered L1 state by the ASPM feature is called ASPM L1.</p>","tags":["pcie","power-management"]},{"location":"pci/l1-aspm/#registers","title":"Registers","text":"","tags":["pcie","power-management"]},{"location":"pci/l1-aspm/#in-pci-express-capability-structure","title":"In PCI Express Capability Structure","text":"<pre><code>Capabilities: [40] Express (v2) Root Port (Slot+), MSI 00\n        LnkCap: Port #11, Speed 16GT/s, Width x4, ASPM L0s L1, Exit Latency L0s &lt;4us, L1 &lt;64us\n                ClockPM- Surprise- LLActRep+ BwNot+ ASPMOptComp+\n        LnkCtl: ASPM L1 Enabled; RCB 64 bytes, Disabled- CommClk+\n                ExtSynch- ClockPM- AutWidDis- BWInt+ AutBWInt+\n</code></pre> <p>In the Link Capibility Register and the Link Control Register:</p> <ol> <li><code>LnkCap</code>: <code>ASPM</code> field shows that which states a function is capable of entering through ASPM. In this case both ASPM <code>L0s</code> and ASPM <code>L1</code> are supported.     The <code>Exit Latency</code> indicate the longest possible latency for a Link to resume from ASPM L-states. </li> <li><code>LnkCtl</code>: <code>ASPM</code> field shows which ASPM states are currently enable. For example, here even though the <code>LnkCap</code> suggests that the function is both ASPM <code>L0s</code> and ASPM <code>L1</code> capable, only ASPM <code>L1</code> is currently enabled.</li> </ol>","tags":["pcie","power-management"]},{"location":"pci/l1-aspm/#enter-l1-by-aspm","title":"Enter L1 by ASPM","text":"<p>Initiate by downstream device, by sending <code>PM_Active_State_Request_L1</code> to and then receive <code>PM_Request_ACK</code> DLLP. If both sides agrees with each other, they send EIOS and enter electrical idle.</p>","tags":["pcie","power-management"]},{"location":"pci/l1-aspm/#exiting-aspm-l1","title":"Exiting ASPM L1","text":"<p>Sending EIEOS and TS1.</p>","tags":["pcie","power-management"]},{"location":"pci/l1-aspm/#topology-matters","title":"Topology matters","text":"<p>If ASPM L1 exit is initiated by an endpoint, components on the path all the way to the Root Complex have to be woken up as well. If ASPM L1 exit initiated by upstream component, all the downstream links that are in ASPM L1 will also be woken up, but not the ones in PCI-PM directed L1.</p>","tags":["pcie","power-management"]},{"location":"pci/l1-aspm/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/l1-aspm/#links","title":"Links","text":"<ul> <li>ASPM on Linux, Linux Wireless documentation</li> <li>Firmware Test Suite - aspm test</li> <li><code>drivers/pci/pcie/aspm.c</code></li> <li>p34, Troubleshooting PCI Express\u00ae Link Training and Protocol Issues: ASPM <code>L1</code> the downstream component indicates the desire to enter the <code>L1</code> state, and sends <code>PM_Active_State_Request_L1</code> to the root, the root acknowledges with <code>PM_Request_ACK DLLP</code></li> <li>p39, Troubleshooting PCI Express\u00ae Link Training and Protocol Issues: for conditions and Ordered Sets required to enter L1 states.</li> <li>2.15.2 Link State Power Management, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): for the L-states involved in ASPM</li> <li>The Importance of Efficient SSD Power Management, PHISON Blog: for general ASPM description.</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l1-aspm/#specification","title":"Specification","text":"<ul> <li>4.2.6.7 L1</li> <li>5.4.1.2 L1 ASPM State</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l1-pcipm/","title":"PCI-PM L1","text":"","tags":["pcie","power-management"]},{"location":"pci/l1-pcipm/#entering-l1-state","title":"Entering L1 state","text":"<p>Put the downstream component into <code>D1</code>, <code>D2</code>, or <code>D3Hot</code>. The software writes to <code>PMCSR</code> register to initiate change.</p> <p>Under the hood, On transition to one of those D-states, the downstream component send a <code>PM_Enter_L1</code> DLLP upstream, and the upsteam component replies with a <code>PM_Request_ACK</code> DLLP to ack it. They must agree upon this because this is software-directed. Finally, they exchange <code>EIOS</code> to enter electrical idle.</p>","tags":["pcie","power-management"]},{"location":"pci/l1-pcipm/#exiting-l1-state","title":"Exiting L1 state","text":"<p>Exchange <code>EIEOS</code> and go to the Recovery state. This can be initiated by either upstream component or downstream component.</p> <p>In the Recovery state machine:</p> <ol> <li><code>Recovery.RecvrLock</code>: do not indicate <code>spped_change</code></li> <li><code>Recovery.RcvrCfg</code></li> <li><code>Recovery.Idle</code></li> </ol> <p>(Probably the easiest path for the Recovery state)</p> <p>And finally to L0.</p>","tags":["pcie","power-management"]},{"location":"pci/l1-pcipm/#exiting-l1-substates","title":"Exiting L1 substates","text":"<p>TODO</p>","tags":["pcie","power-management"]},{"location":"pci/l1-pcipm/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/l1-pcipm/#videos","title":"Videos","text":"<ul> <li>Low Power Overview</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l1-pcipm/#links","title":"Links","text":"<ul> <li>p34, Troubleshooting PCI Express\u00ae Link Training and Protocol Issues: PCIPM uses a config write from the RC to the <code>PMSCR</code> register on the device to initiate the transition to <code>L1</code></li> <li>2.15.3 Relationship Between Device and Link Power States, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): for mapping between allowed L-states for different combination of D-states.</li> <li>2.15.2 Link State Power Management, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): for the L-state diagram.</li> <li>Troubleshooting PCI Express\u00ae Link Training and Protocol Issues: for conditions and Ordered Sets required to enter L1 states.</li> <li>The Importance of Efficient SSD Power Management, PHISON Blog: for L-state diagram.</li> <li>p39, Making the Most of PCIe\u00ae Low Power Features: for what packets look like when entering L1. Although the example is L1.2, but the entrace and exit part are similar.</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l1-pcipm/#specification","title":"Specification","text":"<ul> <li>4.2.6.7 L1</li> <li>5.3.2 PM Software Control of the Link Power Management State</li> <li>5.3.2.1 Entry into the L1 State</li> <li>5.3.2.2 Exit from L1 State</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l1-substates/","title":"L1 substates","text":"","tags":["pcie","power-management"]},{"location":"pci/l1-substates/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/l1-substates/#videos","title":"Videos","text":"<ul> <li>Low Power Overview</li> <li>Measuring L1 Substate Entry and Exit Timings Using CrossSync\u2122 PHY | Teledyne LeCroy</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l1-substates/#links","title":"Links","text":"<ul> <li>Making the Most of PCIe\u00ae Low Power Features: for general description about L1 substates.</li> <li>PCIe Sideband signal operation during lower Power entry and exit: for general description about L1 substates.</li> <li>p37-p39, Troubleshooting PCI Express\u00ae Link Training and Protocol Issues: L1 substates entry and exit, and what the packets look like.</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l1-substates/#specification","title":"Specification","text":"<ul> <li>5.5 L1 PM Substates</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l2-l3-ready/","title":"L2/L3 Ready","text":"<p>This is the transient state between <code>L0</code> and actually entering <code>L2</code> or <code>L3</code>.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/l2-l3-ready/#entering-l2l3-ready","title":"Entering L2/L3 Ready","text":"<p>This happens after software put all the downstream components into <code>D3Hot</code>, and all the Links further downsteam have been in <code>L1</code> state.</p> <p>System software broadcasts <code>PME_Turn_Off</code> downstream to quiese PME first. This put the Link briefly into <code>L0</code> state. The <code>PME_To_Ack</code> from downstream components are gathered and routed upstream.</p> <p>Once all the downstream components ack, in each individual Links the components exchange <code>PM_L23_Ready</code> DLLP and <code>PM_Request_Ack</code> DLLP, then both side enters electrical idle.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/l2-l3-ready/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/l2-l3-ready/#videos","title":"Videos","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/l2-l3-ready/#links","title":"Links","text":"<ul> <li>2.15.2 Link State Power Management, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): for the L-state diagram.</li> <li>The Importance of Efficient SSD Power Management, PHISON Blog: for L-state diagram.</li> <li>Endpoint D3 Entry, 3.7. Power Management, F-Tile Avalon\u00ae Streaming Intel\u00ae FPGA IP for PCI Express* User Guide: an example for transitioning to L2 and L3.</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/l2-l3-ready/#specification","title":"Specification","text":"<ul> <li>5.3.2 PM Software Control of the Link Power Management State</li> <li>5.3.2.3 Entry into the L2/L3 Ready State</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/l2/","title":"L2 State","text":"","tags":["pcie","power-management"]},{"location":"pci/l2/#entering-l2","title":"Entering L2","text":"<p>Enter the L2/L3 Ready state first. And if the <code>Vaux</code> is availabe, the Link enter the <code>L2</code> state.</p> <p>At this state, the main power is no longer available. There's only <code>Vaux</code>. Can only be woken up by side band signal (<code>WAKE#</code>) or beacon signal.</p>","tags":["pcie","power-management"]},{"location":"pci/l2/#exiting-l2","title":"Exiting L2","text":"<p>Needs to start from <code>Detect</code> and redo all the link training before the link can reach <code>L0</code> again.</p>","tags":["pcie","power-management"]},{"location":"pci/l2/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/l2/#videos","title":"Videos","text":"","tags":["pcie","power-management"]},{"location":"pci/l2/#links","title":"Links","text":"<ul> <li>2.15.2 Link State Power Management, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): for the L-state diagram.</li> <li>The Importance of Efficient SSD Power Management, PHISON Blog: for L-state diagram.</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/l3/","title":"L3 State","text":"","tags":["pcie","power-management"]},{"location":"pci/l3/#entering-l3","title":"Entering L3","text":"<p>Enter the L2/L3 Ready state first. And if there's no <code>Vaux</code> on the hardware, the Link enters <code>L3</code> state.</p> <p>At this state, the main power is no longer available. Can only be woken up by side band signal (<code>WAKE#</code>).</p>","tags":["pcie","power-management"]},{"location":"pci/l3/#exiting-l3","title":"Exiting L3","text":"<p>Needs to start from <code>Detect</code> and redo all the link training before the link can reach <code>L0</code> again.</p>","tags":["pcie","power-management"]},{"location":"pci/l3/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/l3/#videos","title":"Videos","text":"","tags":["pcie","power-management"]},{"location":"pci/l3/#links","title":"Links","text":"<ul> <li>2.15.2 Link State Power Management, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): for the L-state diagram.</li> <li>The Importance of Efficient SSD Power Management, PHISON Blog: for L-state diagram.</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/link-equalization/","title":"Recovery.Equalization","text":"<p>This is a substate in the <code>Recovery</code> state (<code>Recovery.Equalization</code>). This is required when the link first enter a Gen3 or above speed (i.e. any speed that uses 128b/130b).</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-equalization/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-equalization/#videos","title":"Videos","text":"<ul> <li>Identifying PCIe 3 0 Dynamic Equalization Problems</li> <li>PCIe 5.0 SerDes Test and Analysis</li> <li>Understanding and Optimizing Equalizers (EQ) in PCI Express</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-equalization/#links","title":"Links","text":"<ul> <li>PCIe LTSSM Link Partner TxEQ Response Characterization and Debug during Link Equalization Training</li> <li>Optimizing PCIe High-Speed Signal Transmission \u2014 Dynamic Link Equalization</li> <li>Troubleshooting PCI Express\u00ae Link Training and Protocol Issues</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-equalization/#specification","title":"Specification","text":"<ul> <li>4.2.6.4.2 Recovery.Equalization</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/","title":"Scenario: link speed change from L0","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#registers","title":"Registers","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#in-pci-express-capability-structure","title":"In PCI Express Capability Structure","text":"<pre><code>Capabilities: [c0] Express (v2) Endpoint, MSI 00\n         ...\n         LnkCap: Port #0, Speed 16GT/s, Width x4, ASPM L1, Exit Latency L1 &lt;8us\n                 ClockPM- Surprise- LLActRep- BwNot- ASPMOptComp+\n         LnkCtl: ASPM L1 Enabled; RCB 64 bytes, Disabled- CommClk+\n                 ExtSynch+ ClockPM- AutWidDis- BWInt- AutBWInt-\n         LnkSta: Speed 16GT/s, Width x4\n                 TrErr- Train- SlotClk+ DLActive- BWMgmt- ABWMgmt-\n         ...\n         LnkCap2: Supported Link Speeds: 2.5-16GT/s, Crosslink- Retimer+ 2Retimers+ DRS-\n         LnkCtl2: Target Link Speed: 16GT/s, EnterCompliance- SpeedDis-\n                  Transmit Margin: Normal Operating Range, EnterModifiedCompliance- ComplianceSOS-\n                  Compliance Preset/De-emphasis: -6dB de-emphasis, 0dB preshoot\n         LnkSta2: Current De-emphasis Level: -6dB, EqualizationComplete+ EqualizationPhase1+\n                  EqualizationPhase2+ EqualizationPhase3+ LinkEqualizationRequest-\n                  Retimer- 2Retimers- CrosslinkRes: unsupported\n</code></pre> <ol> <li> <p>Link Capability Register</p> <ul> <li><code>BwNot</code>: Link Bandwidth Notification Capibility Structure. Notify host on link speed change.</li> </ul> </li> <li> <p>Link Control Register</p> <ul> <li><code>BWInt</code> and <code>AutBWInt</code>: Link Badwidth Management Interrupt Enable and the Link Autonomous Bandwidth Interrupt Enable. For enabling bandwidth change due to Autonomous reasons (e.g. for power management reasons) or for actual bandwidth issues.</li> </ul> </li> <li> <p>Link Status Register</p> <ul> <li><code>BWMgmt</code> and <code>ABWMgmt</code>: Link Bandwidth Management Status and Link Autonomous Bandwidth Status. </li> </ul> </li> <li> <p>Link Control Register 2</p> <ul> <li><code>SpeedDis</code>: Hardware Autonomous Speed Disable</li> </ul> </li> </ol>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#invoke-speed-change-from-software","title":"Invoke speed change from software","text":"<p>Software can do speed change by setting the Link Control register:</p> <ol> <li><code>Target Link Speed</code>: set this in the <code>LnkCtl2</code>.</li> <li><code>Retrain Link</code>: set bit in the Link Control register from a downstream port to force speed change. Only meaningful for a upsteram device.</li> </ol>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#stages-of-speed-change","title":"Stages of speed change","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#entering-recovery","title":"Entering recovery","text":"<ol> <li> <p><code>Recovery.RcvrLock</code>: exchange TS1 in the original speed to achieve symbol lock.</p> <ol> <li>Set the <code>speed_change</code> bit to 1 to indicate intention for speed change.</li> <li>Also advertise the target speed by setting it at the Rate ID field.</li> </ol> <p>The other side ack by sending back TS1, also with <code>speed_change</code> set to 1. If both sides are fine, they enter the <code>Recover.RcvrCfg</code> and start exchanging TS2.</p> </li> <li> <p><code>Recovery.RcvrCfg</code>: upstream device send TS2 with both <code>speed_change</code> and <code>autonomous_change</code> to <code>1</code>, while downstream device send back TS2 with <code>speed_change</code> bit set to <code>1</code>.</p> </li> <li> <p><code>Recovery.Speed</code>: both side send EIOS and enter electric idle and do speed up.</p> </li> </ol>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#after-speed-changed-if-no-equalization-needed","title":"After speed changed (if no equalization needed)","text":"<p>After that, enter <code>Recovery.RecvrLock</code> again, by sending <code>EIEOS</code>.</p> <p>Now they enter the <code>Recovery.RecvrLock</code> again, but with new speed from both side, and repeat the process again, but without setting the <code>speed_change</code> and <code>autonomous_change</code> bits:</p> <ol> <li><code>Recovery.RecvrLock</code></li> <li><code>Recovery.RcvrCfg</code></li> <li><code>Recovery.Idle</code></li> </ol> <p>And finally enter L0</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#after-speed-change-if-equalization-needed","title":"After speed change (if equalization needed)","text":"<p>Equalization is needed when first entering a Gen3 or Gen4 speed for the first time. The general feeling is that link equalization is needed whenever the link enters a 128b/130b-encoding speed for the first time, although for Gen5 it is allowed not to do Link Equalization when first entering this speed.</p> <p>The difference is in that, after re-entering the <code>Recovery.RecvrLock</code> with a new speed, instead of going straight to <code>Recovery.RecvrCfg</code>, go for a detour to <code>Recovery.equalization</code> first, so it becomes:</p> <ol> <li><code>Recovery.RecvrLock</code>: EC (Equalization Control) will be set here, to suggest that link equalization comes next.</li> <li><code>Recovery.Equalization</code></li> <li><code>Recovery.RecvrLock</code>: new!</li> <li><code>Recovery.RcvrCfg</code></li> <li><code>Recovery.Idle</code></li> </ol> <p>And finally enter L0.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#videos","title":"Videos","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-speed-change/#links","title":"Links","text":"<ul> <li>p23, Troubleshooting PCI Express\u00ae Link Training and Protocol Issues: for the speed change TS1 and TS2 sequence.</li> <li>PCI Express* 3.0 Technology: PHY Implementation Considerations for Intel Platforms</li> <li>Link Status (LSTS) \u2013 Offset 52</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/","title":"Scenario: link width change from L0","text":"<p>This could be due to reliability issues, or to reduce power consumption.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#registers","title":"Registers","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#in-pcie-capility-structure","title":"In PCIe Capility Structure","text":"<ol> <li><code>AutWidDis</code>: Hardware Autonomous Width Disable</li> </ol>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#prerequisites","title":"Prerequisites","text":"<p>In the <code>Configuration.Complete</code> of the Link Training process, both side of the Link set the 6th bit in the Rate ID of the <code>TS2</code> to indicate if they are up-configuring capable.</p> <p>Note that the 6th bit in the Rate ID field serves more like a flag. The meaning of that flag changes according to what state the Link is in.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#process","title":"Process","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#entering-recovery-from-l0","title":"Entering Recovery from L0","text":"<p>From <code>L0</code>, enter Recovery state by sending TS1. The 6th bit of Rate ID now means if we are requesting Recovery due to a <code>speed_change</code>, which is not. So this bit is set to <code>0</code>. Also set the <code>aunonomous_change</code> bit in the <code>TS1</code> accordingly.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#recovery","title":"Recovery","text":"<p>The first 2 stages are somewhat standard in all the <code>Recovery</code> processes. However, in the last stage, the downstream device sends PAD-PAD to send both side back to Configuration:</p> <ol> <li><code>Recovery.RcvrLock</code>: with <code>speed_change</code> set to <code>0</code> </li> <li><code>Recovery.RcvrCfg</code></li> <li><code>Recovery.Speed</code>: in stead of entering logical idle, send <code>TS1</code> with PAD-PAD Link Number and Lane Number.</li> </ol>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#configuration","title":"Configuration","text":"<p>This is now fall to the sandard Configuration stages: upstream guess a Link Number, downstream replies, upstream guess a Lane Number scheme, downstream replies.</p> <p>After entering the <code>Configuration.Idle</code>, they are ready to enter <code>L0</code>.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#videos","title":"Videos","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/link-width-change/#links","title":"Links","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltr/","title":"Latency Tolerance Reporting (LTR)","text":"<p>Defines the time interval that a function can tolerate without being served by the root. After this period of time, the function might be entering lower power management state. A function reports this so that the root can prioritize its services.</p>","tags":["pcie","power-management"]},{"location":"pci/ltr/#registers","title":"Registers","text":"","tags":["pcie","power-management"]},{"location":"pci/ltr/#in-latency-tolerance-reporting-capability-structure","title":"In Latency Tolerance Reporting Capability Structure","text":"<pre><code>Capabilities: [1b8 v1] Latency Tolerance Reporting\n        Max snoop latency: 15728640ns\n        Max no snoop latency: 15728640ns\n</code></pre>","tags":["pcie","power-management"]},{"location":"pci/ltr/#in-l1-pm-substates-capability-structure","title":"In L1 PM Substates Capability Structure","text":"<pre><code>Capabilities: [900 v1] L1 PM Substates\n        L1SubCap: PCI-PM_L1.2+ PCI-PM_L1.1+ ASPM_L1.2+ ASPM_L1.1- L1_PM_Substates+\n                  PortCommonModeRestoreTime=32us PortTPowerOnTime=10us\n        L1SubCtl1: PCI-PM_L1.2+ PCI-PM_L1.1+ ASPM_L1.2+ ASPM_L1.1-\n                   T_CommonMode=0us LTR1.2_Threshold=116736ns\n        L1SubCtl2: T_PwrOn=50us\n</code></pre>","tags":["pcie","power-management"]},{"location":"pci/ltr/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/ltr/#specification","title":"Specification","text":"<ul> <li>6.18 Latency Tolerance Reporting (LTR) Mechanism</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/ltssm-configuration/","title":"<code>Configuration</code>","text":"<p>In this stage, the upstream component will try to figure out how many Links it's going to make out of all the trained Lanes in the Polling state, and group those Lanes into Links.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-configuration/#links-and-lanes","title":"Links and Lanes","text":"<p>This is achieved by exchanging the Lane Number and Link Number field by <code>TS1</code>.</p> <p>The Link Number is negotiated first, by exchanging <code>TS1</code>, and then the Lane Number in each Link is determined again by exchanging <code>TS1</code>.</p> <p>The Lanes are grouped by Link Numbers provided by the upstream component. Lanes belongs to the same Link Shares the same Link Number.</p> <p>Each Lane within the same Link also has a unique Lane Number. Note that the Lane Number is unique only within a Link.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-configuration/#configurationlanewidth","title":"<code>Configuration.Lanewidth</code>","text":"<p>The states in <code>Configuration.LaneWidth</code> are steps to determine how to partition existing Lanes into Links:</p> <ol> <li>The upstream component first proposes a non-PAD Link Number, and</li> <li>The downstream component could response with the same Link Number if it agrees with the proposed Link Number, or</li> <li>Correct the upstream component by sending back <code>TS1</code> with proper Link Number.</li> </ol>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-configuration/#configurationlanenum","title":"<code>Configuration.Lanenum</code>","text":"<p>After both side agree with the Link Number, the Lane Numbers of each Lane within that Link are determined.</p> <p>The process is somewhat similar to that of the Link Number:</p> <ol> <li>The upstream component first proposes a set of Lane Numbers, starting from <code>0</code> (let's say <code>0</code> to <code>n-1</code>), for Lanes within that Link, by populating the fields in the <code>TS1</code> sent to each Lane.</li> <li>The downstream component can either agree with that Lane-Numbering scheme, by sending back <code>TS1</code>s with the same Lane-Number scheme, or</li> <li>Correct the upstream component by filling the correct Lane Number in <code>TS1</code>. THe scheme proposed by downstream component also has to be consecutive numbers begin with 0.</li> </ol> <p>Note that upstream component always expect consecutive Lane Numbers starting from 0 from the downstream component. This is helpful for detecting wrong bifurcation.</p> <p>For example, if after sending <code>[0, 7]</code>, but instead of a re-ordering of <code>[0, 7]</code> upstream component receives <code>[0, 3]</code> and <code>[0, 3]</code> in Lane Numbering, this might be a suggestion that the downstream are 2 x4 Links, instead of a single x8 Link. </p> <p>Also note that downstream component could could propose using fewer Lanes than upstream component has proposed.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-configuration/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-configuration/#links","title":"Links","text":"<ul> <li>Configuration, PCIe Deep Dive, Part 4: LTSSM</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-configuration/#specification","title":"Specification","text":"<ul> <li>4.2.6.3 Configuration</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-detect/","title":"Detect","text":"<p>This is the beginning of the link training. Detect the link partner electrically (e.g. by voltage charging time.)</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-detect/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-detect/#videos","title":"Videos","text":"<ul> <li>PCIE Protocol - LTSSM Detailed discussion (00:07:13)</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-detect/#links","title":"Links","text":"<ul> <li>Detect, PCIe Deep Dive, Part 4: LTSSM</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-detect/#specification","title":"Specification","text":"<ul> <li>4.2.6.1 Detect</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-overview/","title":"LTSSM overview","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-overview/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-overview/#videos","title":"Videos","text":"<ul> <li>PCIE Protocol - LTSSM Detailed discussion</li> <li>Debugging PCIe Interface up to 32 Gbps (Gen5 Data Rate) | Prodigy Technovations Webinar</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-overview/#links","title":"Links","text":"<ul> <li>PCIe Deep Dive, Part 4: LTSSM</li> <li>drivers/pci/controller/pcie-mediatek-gen3.c</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-overview/#specification","title":"Specification","text":"<ul> <li>4.2.5 Link Training and Status State Machine (LTSSM) Descriptions</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-polling/","title":"Polling","text":"<p>The goal is to find out lanes that are at lease capable of exchanging training sequences, by repeatedly exchanging <code>TS1</code> and then <code>TS2</code>, and see response from the other side.</p> <p>The <code>Polling</code> state only makes sure each Lane is functional, but doesn't group them into Links. At the end of <code>Polling</code> state, Lanes still haven't been bonded into Links. Grouping Lanes into Links happens dynamically in the <code>Configuration</code> state of the LTSSM (which is the next state after <code>Polling</code> if things goes normally).</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-polling/#pollingactive","title":"<code>Polling.Active</code>","text":"<p><code>Polling</code> begins from each Lane sending 1024 <code>TS1</code>s, in the meanwhile receiving <code>TS1</code> from the other side of a Lane, basically trying to confirm that the link partner has recovered the clock and then achieve symbol lock.</p> <p>Once all Lanes receives enough of <code>TS1</code>, or start seeing the link partner sending <code>TS2</code>, the LTSSM is ready to enter the Polling.Configuration state.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-polling/#pollingconfiguration","title":"<code>Polling.Configuration</code>","text":"<p>in <code>Polling.Configuration</code> state, both sides of the Lanes start sending <code>TS2</code> instead. Again, once certain amount of <code>TS2</code>s are successfully sent and received, the link training moves on to the <code>Polling</code> state.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-polling/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-polling/#videos","title":"Videos","text":"<ul> <li>PCIE Protocol - LTSSM Detailed discussion (00:08:27)</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-polling/#links","title":"Links","text":"<ul> <li>PCIe Deep Dive, Part 4: LTSSM</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-polling/#specification","title":"Specification","text":"<ul> <li>4.2.4.13 Lane vs. Link Training</li> <li>4.2.6.2 Polling</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-recovery/","title":"Recovery","text":"<p>The general pattern for a <code>Recovery</code> would look like:</p> <ol> <li>Enter <code>Recovery</code> by sending <code>TS1</code>: also fill the fields in the <code>TS1</code> to indicate the reason and details to enter <code>Recovery</code> (e.g. <code>speed_change</code> ot not? <code>autonomous_change</code> or not?)</li> <li><code>Recovery.RecvrLock</code>: achieve bit lock and symbol lock by exchanging TS1.</li> <li><code>Recovery.RecvrCfg</code>: the actual stage where meaningful communication happens. Negotiate what both sides would like to do by exchanging TS2.</li> <li>Once both the agreement is reached, switch to the next state and starting doing that.</li> </ol>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-recovery/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-recovery/#links","title":"Links","text":"<ul> <li>p28, Troubleshooting PCI Express\u00ae Link Training and Protocol Issues: the Recovery state machine.</li> <li>PCI Express* 3.0 Technology: PHY Implementation Considerations for Intel Platforms: as old as it might look, this is one of the very few sources that actually mentioned 128b/130b encoding and the role of 128b/130b TS1/TS2 in speed change.</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ltssm-recovery/#specification","title":"Specification","text":"<ul> <li>4.2.6.4 Recovery</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/pme/","title":"Power Management Event (PME)","text":"","tags":["pcie","power-management"]},{"location":"pci/pme/#registers","title":"Registers","text":"","tags":["pcie","power-management"]},{"location":"pci/pme/#in-power-management-capability","title":"In Power Management Capability","text":"<pre><code>Capabilities: [80] Power Management version 3\n        Flags: PMEClk- DSI- D1- D2- AuxCurrent=0mA PME(D0-,D1-,D2-,D3hot-,D3cold-)\n        Status: D0 NoSoftRst+ PME-Enable- DSel=0 DScale=0 PME-\n</code></pre> <ol> <li><code>PME</code>: the states where a function is capable of sending PME.</li> <li><code>Status</code>: this is the <code>PMCSR</code> register:<ol> <li><code>PME-Enable</code>: whether or not the function is allowed to send PME.</li> <li><code>PME</code>: has any PME from the function occured?</li> </ol> </li> </ol>","tags":["pcie","power-management"]},{"location":"pci/pme/#transition-back-to-d0","title":"Transition back to <code>D0</code>","text":"<p>A function can't simply switch to <code>D0</code> by itself. Instead, it has to send PME upstream to ask software for doing that. This also includes writing to its <code>PMCSR</code> to change the device D-state. </p> <p>However, before the the PME can be sent, the Link must be put back to <code>L0</code>. If the Link is under <code>L1</code>, then going through <code>Recovery</code> would be enough. If Link is in <code>L2</code> or <code>L3</code>, the main power has to be applied first. Because the Link is not usable at this point, there have to be other ways to request that power back.</p>","tags":["pcie","power-management"]},{"location":"pci/pme/#request-main-power-from-link","title":"Request main power from Link","text":"<p>If <code>Vaux</code> is available, the device could signal the <code>WAKE#</code> pin. Then system can then power back the device so that Link could train, and once Link is ready the function finally send PME to ask software set it back to <code>D0</code>.</p>","tags":["pcie","power-management"]},{"location":"pci/pme/#references","title":"References","text":"","tags":["pcie","power-management"]},{"location":"pci/pme/#videos","title":"Videos","text":"","tags":["pcie","power-management"]},{"location":"pci/pme/#links","title":"Links","text":"<ul> <li>[PATCH -v7 4/4] PCIe, PM, Add PCIe runtime D3cold support</li> <li>1.2. Native PCI Power Management</li> <li>PCIe device states, Qualcomm Linux Interfaces Guide</li> <li>2.15 Power Management, KeyStone Architecture Peripheral Component Interconnect Express (PCIe): for D-state state machine diagram.</li> <li><code>include/uapi/linux/pci_regs.h</code>: for register definitions.</li> <li>Power Management Control And Status Register, 13th Generation Intel\u00ae Core\u2122 Processor Datasheet, Volume 2 of 2: for register definitions.</li> <li>3.7. Power Management, F-Tile Avalon\u00ae Streaming Intel\u00ae FPGA IP for PCI Express* User Guide: an example how D-states are related to the L-states.</li> <li>2.15.3 Relationship Between Device and Link Power States: another example how D-states are related to the L-states.</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/pme/#specification","title":"Specification","text":"<ul> <li>5.3.3 Power Management Event Mechanisms</li> <li>6.1.5 PME Support</li> </ul>","tags":["pcie","power-management"]},{"location":"pci/ts1-ts2/","title":"TS1 and TS2","text":"<p>Note that training after a reset starts in Gen 1 speed even if the function is capable of higher speed. Gen 1 speed uses 8b/10b encoding, so the Link Trainig process at this stage also uses the 8b/10b version of <code>TS1</code> and <code>TS2</code>, instead of the 128b/130b ones that the Gen 3 speed (and above) use. Only when the Link enters <code>L0</code> and change the speed through the <code>Recovery</code> can the Link starts using the 128b/130b version of <code>TS1</code> and <code>TS2</code>.</p>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ts1-ts2/#common-fields","title":"Common fields","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ts1-ts2/#in-8b10b-encoding","title":"In 8b/10b encoding","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ts1-ts2/#in-128b130b-encoding","title":"In 128b/130b encoding","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ts1-ts2/#references","title":"References","text":"","tags":["pcie","pcie-ltssm"]},{"location":"pci/ts1-ts2/#links","title":"Links","text":"<ul> <li>PCIe Deep Dive, Part 4: LTSSM</li> <li>p26, Troubleshooting PCI Express\u00ae Link Training and Protocol Issues</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pci/ts1-ts2/#specification","title":"Specification","text":"<ul> <li>4.2.4.1 Training Sequences</li> </ul>","tags":["pcie","pcie-ltssm"]},{"location":"pm/acpi-c-states/","title":"ACPI C-States","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-c-states/#references","title":"References","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-c-states/#videos","title":"Videos","text":"<ul> <li>Tuning Linux for Performance - I Wanna Go Fast! - Anthony Nocentino - PSConfEU 2023</li> <li>Tuning RT Kernel to Improve Schedule Performance with Intel Platform - Junxiao Chang, Intel</li> </ul>","tags":["power-management","acpi"]},{"location":"pm/acpi-c-states/#links","title":"Links","text":"<ul> <li>CPU idle power saving methods for real-time workloads on Linux Foundation Wiki</li> <li>Excerpt of Energy Efficient Servers: Blueprints for Data Center Optimization</li> </ul>","tags":["power-management","acpi"]},{"location":"pm/acpi-debugging/","title":"ACPI Debugging","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-debugging/#interactively-browsing-acpi-tables","title":"Interactively browsing ACPI tables","text":"<p>Other than disassemble using <code>iasl -d</code> all at once, <code>acpiexect</code> is another tool where one could interactively browsing ACPI table. After <code>acpixtract</code>, simply:</p> <pre><code>$ acpiexec *.dat\n</code></pre> <p>And repeatedly using <code>find</code> and <code>dis</code>. For example, to find all _PS0 method, in the <code>acpiexec</code> shell:</p> <pre><code>find _PS0\n</code></pre> <p>It'll show something like this:</p> <pre><code>             \\_SB.PC00.GFX0._PS0 Method       0x586cbdaf8430 099 Args 0 Len 0000 Aml 0x586cbd826ff1\n             \\_SB.PC00.XHCI._PS0 Method       0x586cbd990f70 001 Args 0 Len 0031 Aml 0x7b205997a312\n        \\_SB.PC00.XHCI.RHUB._PS0 Method       0x586cbd991380 001 Args 0 Len 0041 Aml 0x7b205997a3b5\n             \\_SB.PC00.HDAS._PS0 Method       0x586cbd991ed0 001 Args 0 Len 0035 Aml 0x7b205997a874\n        \\_SB.PC00.I2C1.TPL0._PS0 Method       0x586cbda523d0 001 Args 0 Len 0028 Aml 0x7b20599b3e12\n...\n             \\_SB.PC00.TRP0._PS0 Method       0x586cbdaa03b0 030 Args 0 Len 024B Aml 0x586cbd7ecf84\n             \\_SB.PC00.TRP1._PS0 Method       0x586cbdaa4df0 030 Args 0 Len 024B Aml 0x586cbd7ee2d0\n             \\_SB.PC00.TRP2._PS0 Method       0x586cbdaa9830 030 Args 0 Len 024B Aml 0x586cbd7ef61e\n             \\_SB.PC00.TRP3._PS0 Method       0x586cbdaae270 030 Args 0 Len 024B Aml 0x586cbd7f096c\n</code></pre> <p>To inspect a particular implementation, use <code>dis</code> command. For example, to see how <code>\\_SB.PC00.TRP0._PS0</code> is implemented:</p> <pre><code>dis \\_SB.PC00.TRP0._PS0\n</code></pre> <p>Which on my laptop looks like:</p> <pre><code>{\n    ADBG (Concatenate (\"TBT _PS0 Start RP \", ToHexString (TUID)))\n    ADBG (Concatenate (\"TBT RP VDID -\", ToHexString (VDID)))\n    HPEV ()\n    HPME ()\n    If (LEqual (PMEX, One))\n    {\n        ADBG (\"Disable PME SCI\")\n        Store (Zero, PMEX) /* External reference */\n    }\n\n    Sleep (PLAT)\n    If (LOr (LEqual (TUID, Zero), LEqual (TUID, One)))\n    {\n        If (LEqual (\\_SB.PC00.TDM0.WACT, One))\n        {\n            Store (0x02, \\_SB.PC00.TDM0.WACT) /* External reference */\n            \\_SB.PC00.TDM0.WFCC (ITCT)\n            Store (Zero, \\_SB.PC00.TDM0.WACT) /* External reference */\n        }\n        ElseIf (LEqual (\\_SB.PC00.TDM0.WACT, 0x02))\n        {\n            ADBG (\"Wait until other _PS0 get response\")\n            While (LNotEqual (\\_SB.PC00.TDM0.WACT, Zero))\n            {\n                Sleep (0x05)\n            }\n\n            ADBG (\"Other _PS0 got response\")\n        }\n    }\n  ...\n}\n</code></pre> <p>And repeatedly <code>find</code> and <code>dis</code>. For example, if I'd like to see what <code>HPEV</code> does, simply <code>find</code> and <code>dis</code> it again in the <code>acpiexec</code> shell:</p> <pre><code>find HPEV\n</code></pre> <p>Which shows:</p> <pre><code>             \\_SB.PC00.TRP0.HPEV Method       0x57ab8cec2ff0 030 Args 0 Len 009C Aml 0x57ab8cc0fb8d\n             \\_SB.PC00.TRP1.HPEV Method       0x57ab8cec7a30 030 Args 0 Len 009C Aml 0x57ab8cc10ed9\n             \\_SB.PC00.TRP2.HPEV Method       0x57ab8cecc470 030 Args 0 Len 009C Aml 0x57ab8cc12227\n             \\_SB.PC00.TRP3.HPEV Method       0x57ab8ced0eb0 030 Args 0 Len 009C Aml 0x57ab8cc13575\n</code></pre> <p><code>dis</code> the one under the same scope (<code>\\_SB.PC00.TRP0.HPEV</code>):</p> <pre><code>dis \\_SB.PC00.TRP0.HPEV\n</code></pre> <p>For the ACPI tables on my laptops it shows:</p> <pre><code>{\n    If (LAnd (LNotEqual (VDID, 0xFFFFFFFF), HPSX))\n    {\n        ADBG (Concatenate (\"HotPlug Event Start for ITBT Port - \", ToHexString (TUID)))\n        If (LAnd (LEqual (PDCX, One), LEqual (DLSC, One)))\n        {\n            Store (One, PDCX) /* External reference */\n            Store (One, HPSX) /* External reference */\n            Notify (^, Zero) // Bus Check\n        }\n        Else\n        {\n            Store (One, HPSX) /* External reference */\n        }\n\n        ADBG (Concatenate (\"HotPlug Event End for ITBT Port - \", ToHexString (TUID)))\n    }\n}\n</code></pre>","tags":["power-management","acpi"]},{"location":"pm/acpi-debugging/#references","title":"References","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-debugging/#videos","title":"Videos","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-debugging/#links","title":"Links","text":"<ul> <li>ACPI Source Language (ASL) Tutorial from Intel.</li> <li>Debug ACPI DSDT and SSDT with ACPICA Utilities</li> <li>ACPI Tricks and Tips</li> <li>Debugging ACPI using acpiexec</li> <li>Simple ACPI monitoring tools</li> <li>How to Read The ACPI Specification: the order between chapters has changed in the latest ACPI spec, but the idea is the same.</li> </ul>","tags":["power-management","acpi"]},{"location":"pm/acpi-p-states/","title":"ACPI P-States","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-p-states/#references","title":"References","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-p-states/#videos","title":"Videos","text":"<ul> <li>07 - OSPM 2024 - Rafael J. Wysocki, Intel - Energy Models and Intel chips</li> <li>A New CPU Frequency Control Mechanism on Linux - Ray Huang, AMD</li> <li>Power Capping Linux - Srinivas Pandruvada, Intel</li> </ul>","tags":["power-management","acpi"]},{"location":"pm/acpi-pm-objects/","title":"ACPI Power Management Objects","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-pm-objects/#references","title":"References","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-pm-objects/#videos","title":"Videos","text":"<ul> <li>Collaboration Summit 2013 - Implementing ACPI 5 Features Device Enumeration and PM: power management related topic starts in 40:55.</li> </ul>","tags":["power-management","acpi"]},{"location":"pm/acpi-pm-objects/#links","title":"Links","text":"<ul> <li>7.3. Device Power Management Objects</li> </ul>","tags":["power-management","acpi"]},{"location":"pm/acpi-s-states/","title":"ACPI S-States","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-s-states/#references","title":"References","text":"","tags":["power-management","acpi"]},{"location":"pm/acpi-s-states/#videos","title":"Videos","text":"<ul> <li>Arch4001 07 Power Transition 01 Intro 01 Intr</li> <li>Computer Architecture: CPU ACPI Power Management lecture 1</li> <li>Improving monitoring of power saving states - Mr Stanislaw Kardach (Google), Sven van Ashbrook</li> </ul>","tags":["power-management","acpi"]},{"location":"pm/cpufreq/","title":"cpufreq","text":"","tags":["power-management"]},{"location":"pm/cpufreq/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/cpufreq/#videos","title":"Videos","text":"<ul> <li>SUSE Labs Conference 2020 - The schedutil frequency governor: current status and performance</li> <li>Kernel modification: Adding Governors</li> <li>Advances in CPU Frequency Management</li> <li>LinuxDays 2018 - Frequency scaling governor for the Linux kernel - Giovanni Gherdovich</li> <li>LinuxDays 2017 - CPU Frequency Scaling in Linux - Giovanni Gherdovich</li> </ul>","tags":["power-management"]},{"location":"pm/cpuidle/","title":"cpuidle.md","text":"","tags":["power-management"]},{"location":"pm/cpuidle/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/cpuidle/#videos","title":"Videos","text":"<ul> <li>[ENG] Rafael J. Wysocki: \"Advances in CPU Idle Time Management in Linux\" / #LinuxPiter</li> </ul>","tags":["power-management"]},{"location":"pm/opp/","title":"OPP","text":"","tags":["power-management"]},{"location":"pm/opp/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/opp/#videos","title":"Videos","text":"<ul> <li>Power management techniques on embedded Linux (21:50)</li> </ul>","tags":["power-management"]},{"location":"pm/opp/#links","title":"Links","text":"<ul> <li>Operating Performance Points (OPP) Library in Linux Kernel Documentation.</li> </ul>","tags":["power-management"]},{"location":"pm/pm-domain/","title":"PM Domain (genpd)","text":"","tags":["power-management"]},{"location":"pm/pm-domain/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/pm-domain/#videos","title":"Videos","text":"<ul> <li>Kernel Recipes 2017 - Overview of Generic PM Domains (genpd) - Kevin Hilman</li> <li>The Case for an SoC Power Management Driver - Stephen Boyd, Google</li> <li>Adding Runtime Power Management Capabilities to Device Drivers - Shreeya Patel, Collabora</li> <li>SAN19-421 Training: Device power management for idle</li> </ul>","tags":["power-management"]},{"location":"pm/pm-domain/#links","title":"Links","text":"<ul> <li>Active state management of power domains</li> </ul>","tags":["power-management"]},{"location":"pm/pm-overview/","title":"Power Management Overview","text":"","tags":["power-management"]},{"location":"pm/pm-overview/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/pm-overview/#videos","title":"Videos","text":"<ul> <li>Kernel Recipes 2015 - Introduction to Kernel Power Management - by Kevin Hilman</li> <li>Power management on Linux: from the hardware to the kernel and userspace interfaces</li> <li>Power management techniques on embedded Linux</li> <li>YVR18-221:Linux Kernel Power Management Features - An Overview</li> <li>BKK19-TR02 - Linux Kernel Power Management - 101</li> <li>Michael Turquette: \"Introduction to Power Management\" [ENG]</li> </ul>","tags":["power-management"]},{"location":"pm/qos/","title":"Power Management QoS","text":"","tags":["power-management"]},{"location":"pm/qos/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/qos/#videos","title":"Videos","text":"<ul> <li>CPU Power Saving Methods for Real-time Workloads - Ramesh Thomas, Intel</li> </ul>","tags":["power-management"]},{"location":"pm/runtime-pm/","title":"Runtime Power Management","text":"","tags":["power-management"]},{"location":"pm/runtime-pm/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/runtime-pm/#videos","title":"Videos","text":"<ul> <li>Adding Runtime Power Management Capabilities to Device Drivers - Shreeya Patel, Collabora</li> <li>SAN19-421 Training: Device power management for idle</li> <li>BKK19-119 - Device power management and idle</li> <li>LPC2019 - Integration of PM-runtime with System-wide Power Management</li> <li>The Fall of the Legacy - Vaibhav Gupta, Open Source Contributor</li> </ul>","tags":["power-management"]},{"location":"pm/s0ix/","title":"S0ix","text":"","tags":["power-management"]},{"location":"pm/s0ix/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/s0ix/#videos","title":"Videos","text":"<ul> <li>FOSDEM 2025: Wake up, FreeBSD! Implementing Modern Standby with S0ix</li> <li>Host and Guest Suspend Under Xen - S3 and S0ix - Marek Marczykowski-G\u00f3recki, Invisible Things Lab</li> </ul>","tags":["power-management"]},{"location":"pm/s0ix/#links","title":"Links","text":"<ul> <li>(AMD) 18. Debugging AMD Zen systems</li> <li>(AMD) amd_s2idle.py</li> <li>(Intel) The S0ixSelftestTool</li> <li>(Intel) PCH S0 Low Power</li> <li>(Intel) Power Management Sub-state</li> <li>Prepare hardware for modern standby on the Windows documentation.</li> <li>Descriptions on the ChromeOS documentation</li> </ul>","tags":["power-management"]},{"location":"pm/s2idle-freeze/","title":"Suspend-to-idle (freeze)","text":"","tags":["power-management"]},{"location":"pm/s2idle-freeze/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/s2idle-freeze/#videos","title":"Videos","text":"<ul> <li>Evolution of Suspend-to-Idle Support in The Linux Kernel - Rafael Wysocki (LCA 2021 Online)</li> </ul>","tags":["power-management"]},{"location":"pm/s2ram-deep/","title":"Suspend-to-ram (deep)","text":"","tags":["power-management"]},{"location":"pm/s2ram-deep/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/s2ram-deep/#videos","title":"Videos","text":"<ul> <li>Unlocking the Potential of Suspend to RAM Using Linux in a Multi-Core, Multi-Firmware Automotive SoC - Gr\u00e9gory Clement, Bootlin</li> </ul>","tags":["power-management"]},{"location":"pm/s2ram-deep/#links","title":"Links","text":"<ul> <li>Suspend-to-RAM</li> </ul>","tags":["power-management"]},{"location":"pm/standby/","title":"Standby","text":"","tags":["power-management"]},{"location":"pm/standby/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/standby/#video","title":"Video","text":"<ul> <li>Is Linux Suspend ready for the next decade - Len Brown (02:31) :  \"...standby is sort of deprecated. I haven't seen standby on a machine for years.\"</li> </ul>","tags":["power-management"]},{"location":"pm/system-wide-suspend/","title":"System-wide suspend","text":"","tags":["power-management"]},{"location":"pm/system-wide-suspend/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/system-wide-suspend/#videos","title":"Videos","text":"<ul> <li>Is Linux Suspend ready for the next decade - Len Brown</li> <li>Evolution of Suspend-to-Idle Support in The Linux Kernel - Rafael Wysocki (LCA 2021 Online)</li> <li>BKK19-119 - Device power management and idle</li> </ul>","tags":["power-management"]},{"location":"pm/system-wide-suspend/#link","title":"Link","text":"<ul> <li>System Sleep States of the kernel documentation.</li> <li>Power management/Suspend and hibernate in Arch Wiki</li> <li>Suspend and hibernate in Gentoo Wiki.</li> <li><code>include/linux/pm.h</code> in Linux kernel.</li> <li>Device Power Management Basics</li> </ul>","tags":["power-management"]},{"location":"pm/thermal/","title":"Thermal subsystem","text":"","tags":["power-management"]},{"location":"pm/thermal/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/thermal/#videos","title":"Videos","text":"<ul> <li>Improvisation and Demonstration of Linux Thermal Framework for Multiple Temperature Sensors</li> <li>LVC20 110 Skin temperature management with hierarchical constraints</li> </ul>","tags":["power-management"]},{"location":"pm/thermald/","title":"thermald","text":"","tags":["power-management"]},{"location":"pm/thermald/#references","title":"References","text":"","tags":["power-management"]},{"location":"pm/thermald/#links","title":"Links","text":"<ul> <li>intel/thermal_daemon</li> </ul>","tags":["power-management"]},{"location":"sound/alsa-lib/","title":"alsa-lib (libasound)","text":"","tags":["sound"]},{"location":"sound/alsa-lib/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/alsa-lib/#videos","title":"Videos","text":"","tags":["sound"]},{"location":"sound/alsa-lib/#links","title":"Links","text":"<ul> <li>ALSA project - the C library reference</li> <li>tools/testing/selftests/alsa</li> <li>Configuring ALSA controls from an application</li> </ul>","tags":["sound"]},{"location":"sound/alsa-ucm-conf/","title":"ALSA UCM","text":"","tags":["sound"]},{"location":"sound/alsa-ucm-conf/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/alsa-ucm-conf/#videos","title":"Videos","text":"","tags":["sound"]},{"location":"sound/alsa-ucm-conf/#links","title":"Links","text":"<ul> <li>alsa-project/alsa-ucm-conf</li> <li>Alsa UCM</li> </ul>","tags":["sound"]},{"location":"sound/alsa/","title":"ALSA","text":"","tags":["sound"]},{"location":"sound/alsa/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/alsa/#videos","title":"Videos","text":"<ul> <li>Insight of an Audio Driver Based on ALSA - Chandrasekar Ramakrishnan, Samsung</li> <li>Mentorship Session: ALSA: Writing the Soundcard Driver</li> </ul>","tags":["sound"]},{"location":"sound/alsa/#links","title":"Links","text":"<ul> <li>The Virtual PCM Test Driver</li> <li>sound/drivers/pcmtest.c</li> <li>[PATCH v2] [RFC] selftests: alsa - add PCM test</li> </ul>","tags":["sound"]},{"location":"sound/asoc/","title":"ALSA SoC (ASoC)","text":"<p>Try <code>aplay -L</code> and do <code>trace-cmd</code> when doing <code>speaker-test</code> on that card. For example:</p> <pre><code>$ aplay -L\n...\nplughw:CARD=sofhdadsp,DEV=0\n    sof-hda-dsp, \n    Direct hardware device without any conversions\n...\n</code></pre> <p>Then:</p> <pre><code>$ sudo trace-cmd -p function_graph -F \\\n    speaker-test -t wav -c 2 -Dplughw:sofhdadsp\n</code></pre> <p>And finally:</p> <pre><code>$ trace-cmd report | less\n</code></pre>","tags":["sound"]},{"location":"sound/asoc/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/asoc/#videos","title":"Videos","text":"<ul> <li>Generic ALSA SoC Sound Card History (Simple/Graph) - Kuninori Morimoto, Renesas Electronics</li> <li>Insight of an Audio Driver Based on ALSA - Chandrasekar Ramakrishnan, Samsung</li> <li>ASoC: Supporting Audio on an Embedded Board - Alexandre Belloni, Bootlin</li> <li>FOSDEM 2024 - From phone hardware to mobile Linux (11:20)</li> </ul>","tags":["sound"]},{"location":"sound/asoc/#links","title":"Links","text":"<ul> <li>ALSA SoC Layer</li> <li>ALSA overview</li> <li>Soundcard configuration</li> <li>Audio and Embedded Linux</li> </ul>","tags":["sound"]},{"location":"sound/dapm/","title":"DAPM","text":"","tags":["sound"]},{"location":"sound/dapm/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/dapm/#videos","title":"Videos","text":"<ul> <li>Introduction to DAPM, Linux Power Management for Embedded Audio Devices - Luca Ceresoli, Bootlin</li> </ul>","tags":["sound"]},{"location":"sound/dapm/#links","title":"Links","text":"<ul> <li>Dynamic Audio Power Management for Portable Devices</li> <li>tools/sound/dapm-graph</li> </ul>","tags":["sound"]},{"location":"sound/hda/","title":"HDA","text":"","tags":["sound"]},{"location":"sound/hda/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/hda/#videos","title":"Videos","text":"<ul> <li>Linux kernel driver development: fixing Microsoft Surface Pro Realtek headphone out</li> </ul>","tags":["sound"]},{"location":"sound/hda/#links","title":"Links","text":"<ul> <li>High Definition Audio Specification</li> <li>Intel High Definition Audio</li> </ul>","tags":["sound"]},{"location":"sound/pipewire/","title":"Pipewire","text":"","tags":["sound"]},{"location":"sound/pipewire/#references","title":"References","text":"<p>May also refer to other wirepluumber talks. They usually include some clues to pipewire as well.</p>","tags":["sound"]},{"location":"sound/pipewire/#videos","title":"Videos","text":"<ul> <li>Pipewire as the heart of Linux-based audio system (Philip-Dylan Gleonec, Savoir Faire Linux)</li> <li>PipeWire: The New Multimedia Service, Now Ready for Automotive | ELCNA 2020</li> </ul>","tags":["sound"]},{"location":"sound/pulseaudio/","title":"PulseAudio","text":"","tags":["sound"]},{"location":"sound/pulseaudio/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/pulseaudio/#videos","title":"Videos","text":"","tags":["sound"]},{"location":"sound/pulseaudio/#links","title":"Links","text":"<ul> <li>PulseAudio under the hood</li> </ul>","tags":["sound"]},{"location":"sound/sof/","title":"Sound Open Firmware","text":"","tags":["sound"]},{"location":"sound/sof/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/sof/#videos","title":"Videos","text":"<ul> <li>Introducing Sound Open Firmware project (FOSDEM 2024)</li> <li>LVC20 120 Status of Sound Open Firmware on i MX8</li> <li>Enabling Sound Open Firmware on Arm\u00ae Cortex\u00ae-a Based Devices Using Zephyr RTOS - Daniel Baluta, NXP</li> </ul>","tags":["sound"]},{"location":"sound/sof/#links","title":"Links","text":"<ul> <li>GSoC 2025: Sound Open Firmware project</li> <li>Getting Started with SOF for GSoC 2025</li> <li>Build SOF with Zephyr</li> <li>SOF plugin (sof/tools/plugin/README): notably the <code>sof-pipe</code> daemon.</li> <li>SOF testbench (sof/tools/testbench/README.md)</li> </ul>","tags":["sound"]},{"location":"sound/sof/#source-code","title":"Source code","text":"<ul> <li>sound/soc/sof/topology.c: for topology loading.</li> <li>sound/soc/soc-topology.c: general topology loading helpers.</li> <li>sound/soc/soc-topology-test.c: KUnit tests for topology helpers.</li> </ul>","tags":["sound"]},{"location":"sound/soundwire/","title":"Soundwire","text":"","tags":["sound"]},{"location":"sound/soundwire/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/soundwire/#videos","title":"Videos","text":"<ul> <li>Introduction to SoundWire - Vinod Koul, Linaro</li> <li>MIPI DevCon 2017 Bangalore: SoundWire Linux Subsystem</li> </ul>","tags":["sound"]},{"location":"sound/soundwire/#links","title":"Links","text":"<ul> <li>MIPI SoundWire v1.2 Boosts Flexibility for Integrating Mobile Audio Interfaces</li> </ul>","tags":["sound"]},{"location":"sound/wireplumber/","title":"Wireplumber","text":"","tags":["sound"]},{"location":"sound/wireplumber/#references","title":"References","text":"","tags":["sound"]},{"location":"sound/wireplumber/#videos","title":"Videos","text":"<ul> <li>Embedded Audio Policies Made Easy with WirePlumber - George Kiagiadakis, Collabora</li> <li>WirePlumber, Propelling PipeWire for Embedded - Ashok Sidipotu, Collabora</li> <li>Master your PipeWire streams with WirePlumber | Linaro Virtual Connect Fall 2021</li> </ul>","tags":["sound"]},{"location":"workflows/ai-assisted-coding/","title":"AI-assisted coding","text":"","tags":["tooling"]},{"location":"workflows/ai-assisted-coding/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/ai-assisted-coding/#videos","title":"Videos","text":"","tags":["tooling"]},{"location":"workflows/ai-assisted-coding/#links","title":"Links","text":"<ul> <li>[RFC 0/2] Add AI coding assistant configuration to Linux kernel</li> </ul>","tags":["tooling"]},{"location":"workflows/applying-patches/","title":"Applying Patches","text":"<p>This is specifically for applying patches from a <code>.patch</code> or a <code>.mbox</code>, which is a less ideal way especially if patches has landed in some git trees.</p> <p>Easiest way is to use <code>b4</code>:</p> <pre><code>b4 shazam ${LINK_FROM_LORE_KERNEL_ORG}\n</code></pre> <p>For example:</p> <pre><code>b4 shazam 20250613-for-upstream-not-instantiate-spd5118-v2-1-cf456ed9b587@canonical.com\n</code></pre> <p>Another way would be downloading the <code>.mbox</code> from a mailing list thread and use <code>git am</code>.</p>","tags":["tooling"]},{"location":"workflows/applying-patches/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/applying-patches/#videos","title":"Videos","text":"","tags":["tooling"]},{"location":"workflows/applying-patches/#links","title":"Links","text":"<ol> <li>git-am - Apply a series of patches from a mailbox</li> <li>How to apply patches from the Linux Kernel Mailing List</li> <li>Applying Patches To The Linux Kernel (obsolete)</li> <li>am,shazam: retrieving and applying patches from B4 end-used doc.</li> </ol>","tags":["tooling"]},{"location":"workflows/autosel/","title":"AUTOSEL","text":"","tags":["tooling"]},{"location":"workflows/autosel/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/autosel/#videos","title":"Videos","text":"<ul> <li>AI for Kernel Engineers - Sasha Levin, NVIDIA</li> </ul>","tags":["tooling"]},{"location":"workflows/autosel/#links","title":"Links","text":"<ul> <li>AUTOEL source code</li> </ul>","tags":["tooling"]},{"location":"workflows/b4/","title":"b4","text":"","tags":["tooling"]},{"location":"workflows/b4/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/b4/#videos","title":"Videos","text":"<ul> <li>Doing more with lore and b4 - Konstantin Ryabitsev (00:00 ~ 34:10)</li> <li>Submit a kernel patch with b4</li> <li>Submit a follow-up patch with b4</li> <li>Beginner Linux kernel maintainers toolbox - Krzysztof Kozlowski (31:23)</li> <li>Comparing and Contrasting Patman Vs B4 for Posting Patches - Doug Anderson, Google (27:58)</li> </ul>","tags":["tooling"]},{"location":"workflows/b4/#links","title":"Links","text":"<ol> <li>B4 end-user documentation</li> <li>Using lei, b4, and mutt to do kernel development</li> <li>Use b4 for kernel contributions</li> <li>Sending a kernel patch with b4 (part 1)</li> <li>End-to-end patch attestation with patatt and b4</li> </ol>","tags":["tooling"]},{"location":"workflows/backporting/","title":"Backporting","text":"<p>Backporting to Stable Branches is the shortest demo. Although it doesn't use kernel trees as examples, the concept is very applicable to kernel maintenance.</p> <p>For conflict resolution see Backporting and conflict resolution. Depending on how the targeted tree is maintained there could be different ways to do it. One possible way is finding all the dependent patches by recursively git-blaming the partent commit of the incoming commit, like what the kernel doc mentioned.</p> <p>This however might not work if commits in the targeted tree somehow deviates from the upstream too much. Good luck maintaining one then!</p>","tags":["tooling"]},{"location":"workflows/backporting/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/backporting/#videos","title":"Videos","text":"<ul> <li>Backporting Linux Kernel patches</li> <li>Shung-Hsi Yu: Backporting BPF: Techniques and Challenges</li> <li>Backporting to Stable Branches</li> <li>Michal Kube\u010dek: Backporting horror stories</li> <li>LAS16-101: Efficient kernel Backporting</li> <li>Contributing to the CentOS Stream Kernel - Prarit Bhargava and Don Zickus</li> </ul>","tags":["tooling"]},{"location":"workflows/backporting/#links","title":"Links","text":"<ul> <li>Backporting and conflict resolution</li> </ul>","tags":["tooling"]},{"location":"workflows/compiling-kernel-cross/","title":"Cross-Compiling a Kernel","text":"<p>There are just too many ways of doing it and they all should be topic of their own (e.g. Yocto, buildroot, roll-your-own) so I just post a simplest one.</p>","tags":["tooling"]},{"location":"workflows/compiling-kernel-cross/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/compiling-kernel-cross/#videos","title":"Videos","text":"<ul> <li>Embedded Linux from Scratch in 45 minutes, on RISC-V</li> </ul>","tags":["tooling"]},{"location":"workflows/compiling-kernel-native/","title":"Compiling a Kernel","text":"<p>For Debian-based systems there's a <code>bindeb-pkg</code> option that build the kernel into <code>.deb</code>, which is convenient for installing/uninstalling.</p>","tags":["tooling"]},{"location":"workflows/compiling-kernel-native/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/compiling-kernel-native/#videos","title":"Videos","text":"<ul> <li>Linux bootcamp: From casual Linux user to kernel hacker - Part 3</li> <li>Tim Beale: Linux Kernel Development for Newbies</li> <li>Embedded Linux from Scratch in 45 minutes, on RISC-V (Cross-compile example)</li> </ul>","tags":["tooling"]},{"location":"workflows/compiling-kernel-native/#links","title":"Links","text":"<ul> <li>https://javiercarrascocruz.github.io/kernel-build-tricks</li> </ul>","tags":["tooling"]},{"location":"workflows/development-process/","title":"Kernel Development Process","text":"","tags":["workflows"]},{"location":"workflows/development-process/#references","title":"References","text":"","tags":["workflows"]},{"location":"workflows/development-process/#videos","title":"Videos","text":"<ul> <li>Member training: Upstream Kernel Development (Part I)</li> <li>Member training: Upstream Kernel Development (Part II)</li> <li>Getting to Know the Linux Kernel: A Beginner's Guide - Kelsey Steele &amp; Nischala Yelchuri, Microsoft</li> <li>How to Start Contributing to the Linux Kernel - Kelsey Steele &amp; Allen Pais, Microsof</li> <li>Getting Into Linux Kernel Development After 30 Years - Muhammad Usama Anjum, Collabora</li> <li>Mentorship Session: Maintainership &amp; Growing Influence in the Linux Kernel Community</li> <li>Beginner Linux kernel maintainers toolbox - Krzysztof Kozlowski</li> </ul>","tags":["workflows"]},{"location":"workflows/git-basics/","title":"git basics","text":"","tags":["tooling","git"]},{"location":"workflows/git-basics/#references","title":"References","text":"","tags":["tooling","git"]},{"location":"workflows/git-basics/#videos","title":"Videos","text":"<ul> <li>Git it right! [Workshop] - Git Merge 2022</li> <li>So You Think You Know Git - FOSDEM 2024</li> <li>So You Think You Know Git Part 2 - DevWorld 2024</li> <li>Advanced Git Magic - Pauline Vos - Full Stack Europe 2022</li> <li>CSESoc | Git Gud</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-bisect/","title":"git bisect","text":"","tags":["tooling","git"]},{"location":"workflows/git-bisect/#references","title":"References","text":"","tags":["tooling","git"]},{"location":"workflows/git-bisect/#videos","title":"Videos","text":"<ul> <li>Git driven debugging - Git Merge 2022</li> <li>Debugging with Git Bisect</li> <li>Using git bisect to pinpoint bugs in your commit history</li> <li>Howto: git bisect PPC64 PS3 Linux kernel USB regression!</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-bisect/#links","title":"Links","text":"<ul> <li>Git - git-bisect Documentation</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-cherry-pick/","title":"git cherry-pick","text":"","tags":["tooling","git"]},{"location":"workflows/git-cherry-pick/#references","title":"References","text":"","tags":["tooling","git"]},{"location":"workflows/git-cherry-pick/#videos","title":"Videos","text":"<ul> <li>Backporting to Stable Branches</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-cherry-pick/#links","title":"Links","text":"<ul> <li>Git Cherry Pick | Atlassian Git Tutorial</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-interrogators/","title":"git interrogators","text":"","tags":["tooling","git"]},{"location":"workflows/git-interrogators/#references","title":"References","text":"","tags":["tooling","git"]},{"location":"workflows/git-interrogators/#videos","title":"Videos","text":"<ul> <li>So You Think You Know Git - FOSDEM 2024</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-interrogators/#links","title":"Links","text":"<ul> <li>Backporting and conflict resolution</li> <li>Advanced Git log</li> <li>Git - git-cherry-pick Documentation</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-rebase-interactive/","title":"git rebase (interactive)","text":"","tags":["tooling","git"]},{"location":"workflows/git-rebase-interactive/#references","title":"References","text":"","tags":["tooling","git"]},{"location":"workflows/git-rebase-interactive/#videos","title":"Videos","text":"<ul> <li>Git Rebase Interactive :: A Practical Example</li> <li>Inserting a Commit into a Patch Series</li> <li>Reordering Commits in Git</li> <li>Squashing Git commits with Interactive Rebase</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-rebase-interactive/#links","title":"Links","text":"<ul> <li>git rebase | Atlassian Git Tutorial</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-rebase/","title":"git rebase","text":"","tags":["tooling","git"]},{"location":"workflows/git-rebase/#references","title":"References","text":"","tags":["tooling","git"]},{"location":"workflows/git-rebase/#videos","title":"Videos","text":"<ul> <li>RubyConf 2019 - Story telling with Git rebase by Elle Meredith</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-rebase/#links","title":"Links","text":"<ul> <li>git rebase | Atlassian Git Tutorial</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-send-email/","title":"git send-email","text":"","tags":["tooling"]},{"location":"workflows/git-send-email/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/git-send-email/#videos","title":"Videos","text":"<ul> <li>Comparing and Contrasting Patman Vs B4 for Posting Patches - Doug Anderson, Google (01:30)</li> </ul>","tags":["tooling"]},{"location":"workflows/git-send-email/#link","title":"Link","text":"<ul> <li>Submitting Your First Patch to the Linux Kernel and Responding to Feedback</li> </ul>","tags":["tooling"]},{"location":"workflows/git-worktree/","title":"git worktree","text":"","tags":["tooling","git"]},{"location":"workflows/git-worktree/#references","title":"References","text":"","tags":["tooling","git"]},{"location":"workflows/git-worktree/#videos","title":"Videos","text":"<ul> <li>How to use Git Worktree</li> <li>How to Use Git Worktree | Checkout Multiple Git Branches at Once</li> </ul>","tags":["tooling","git"]},{"location":"workflows/git-worktree/#links","title":"Links","text":"<ul> <li>Git - git-worktree Documentation</li> </ul>","tags":["tooling","git"]},{"location":"workflows/kbuild/","title":"KBuild","text":"","tags":["tooling"]},{"location":"workflows/kbuild/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/kbuild/#videos","title":"Videos","text":"<ul> <li>A dive into kbuild - Cao jin, Fujitsu</li> <li>Introduction to Kernel Modules and Kbuild</li> </ul>","tags":["tooling"]},{"location":"workflows/kbuild/#links","title":"Links","text":"","tags":["tooling"]},{"location":"workflows/kconfig/","title":"Kconfig","text":"","tags":["tooling"]},{"location":"workflows/kconfig/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/kconfig/#videos","title":"Videos","text":"<ul> <li>Introduction to Kernel Modules and Kbuild</li> <li>Managing Linux Kernel Configurations with Config Fragments - Darren Hart, VMware</li> <li>Krepair: Automatically Repairing .config Files to Cover Patches - Paul Gazzillo &amp; Necip Yildiran</li> </ul>","tags":["tooling"]},{"location":"workflows/kconfig/#links","title":"Links","text":"","tags":["tooling"]},{"location":"workflows/kernel-binaries/","title":"Kernel Binaries","text":"<p>This ideally should contains common artifacts of a kernel compilation (e.g. kernel image, vmlinux). Apparently this depends heavily on the target architectures and enumerating all them feels impossible, so I only put x86-64 ones here.</p>","tags":["tooling"]},{"location":"workflows/kernel-binaries/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/kernel-binaries/#videos","title":"Videos","text":"<ul> <li>Linker scripts in the Linux Kernel, Kernel Image structure, and x86 boot sector debugging</li> </ul>","tags":["tooling"]},{"location":"workflows/kernel-binaries/#links","title":"Links","text":"<ul> <li>Process of the Linux kernel building</li> </ul>","tags":["tooling"]},{"location":"workflows/kernel-coding-patterns/","title":"Kernel Coding Patterns","text":"","tags":["workflows"]},{"location":"workflows/kernel-coding-patterns/#references","title":"References","text":"","tags":["workflows"]},{"location":"workflows/kernel-coding-patterns/#videos","title":"Videos","text":"<ul> <li>Kernel Coding the Upstream Way - Tim Bird, Sony</li> <li>Kernel Recipes 2019 - Hunting and fixing bugs all over the Linux kernel</li> <li>Progress On Bounds Checking in C and the Linux Kernel - Kees Cook, Google &amp; Gustavo A.R. Silva</li> </ul>","tags":["workflows"]},{"location":"workflows/kernel-release-model/","title":"Kernel Release Model","text":"","tags":["workflows"]},{"location":"workflows/kernel-release-model/#references","title":"References","text":"","tags":["workflows"]},{"location":"workflows/kernel-release-model/#videos","title":"Videos","text":"<ul> <li>Kernel Recipes 2017 - Linux Kernel release model - Greg KH</li> <li>Day-to-day Testing of Linux 'Next' Kernel Branch - My Story - Marek Szyprowski, Samsung Electronics</li> <li>Kernel Recipes 2016 - From \u2018git tag\u2019 to the front page - Konstantin Ryabitsev</li> <li>An engineer's guide to Linux Kernel upgrades - Ignat Korchagin - NDC TechTown 2023</li> </ul>","tags":["workflows"]},{"location":"workflows/lei/","title":"lei","text":"","tags":["tooling"]},{"location":"workflows/lei/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/lei/#videos","title":"Videos","text":"<ol> <li>Beginner Linux kernel maintainers toolbox - Krzysztof Kozlowski2</li> <li>Doing more with lore and b4 - Konstantin Ryabitsev (34:10 ~ FIN)</li> </ol>","tags":["tooling"]},{"location":"workflows/lei/#links","title":"Links","text":"<ol> <li>Using lei, b4, and mutt to do kernel development</li> <li>lore+lei: part 1, getting started</li> <li>lore+lei: part 2, now with IMAP</li> <li><code>lei-q(1)</code></li> </ol>","tags":["tooling"]},{"location":"workflows/patch-format/","title":"Patch format","text":"","tags":["tooling"]},{"location":"workflows/patch-format/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/patch-format/#videos","title":"Videos","text":"<ul> <li>How Linux is built with Greg Kroah-Hartman</li> <li>Mentorship Session: Writing Change Logs that Make Sense</li> </ul>","tags":["tooling"]},{"location":"workflows/patch-format/#links","title":"Links","text":"<ul> <li>Submitting Patches</li> </ul>","tags":["tooling"]},{"location":"workflows/patchwise/","title":"PatchWise","text":"","tags":["tooling"]},{"location":"workflows/patchwise/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/patchwise/#links","title":"Links","text":"<ul> <li>qualcomm/PatchWise</li> </ul>","tags":["tooling"]},{"location":"workflows/patman/","title":"patman","text":"","tags":["workflows"]},{"location":"workflows/patman/#references","title":"References","text":"","tags":["workflows"]},{"location":"workflows/patman/#videos","title":"Videos","text":"<ul> <li>Comparing and Contrasting Patman Vs B4 for Posting Patches - Doug Anderson, Google (03:52)</li> </ul>","tags":["workflows"]},{"location":"workflows/stable-releases/","title":"Stable Releases","text":"","tags":["workflows"]},{"location":"workflows/stable-releases/#references","title":"References","text":"","tags":["workflows"]},{"location":"workflows/stable-releases/#videos","title":"Videos","text":"<ul> <li>Safeguards in the Stable Kernel Process - Sasha Levin, Microsoft</li> <li>Kernel Recipes 2017 - Linux Kernel release model - Greg KH</li> <li>Kernel Recipes 2015 - Linux Stable Release process - by Greg KH</li> </ul>","tags":["workflows"]},{"location":"workflows/upstreaming-process/","title":"Upstreaming Process","text":"","tags":["workflows"]},{"location":"workflows/upstreaming-process/#references","title":"References","text":"","tags":["workflows"]},{"location":"workflows/upstreaming-process/#videos","title":"Videos","text":"<ul> <li>Submitting Your First Patch to the Linux Kernel and Responding to Feedback</li> <li>Getting to Know the Linux Kernel: A Beginner's Guide - Kelsey Steele &amp; Nischala Yelchuri, Microsoft</li> <li>Baby Steps to Kernel Hacking - Sayli Yogesh Karnik, Credit Suisse</li> <li>Tutorial: From an Idea to a Patch in the Linux Mainline - Marta Rybczynska, Various Projects</li> </ul>","tags":["workflows"]},{"location":"workflows/xapian-query-syntax/","title":"Xapian Query Syntax","text":"","tags":["tooling"]},{"location":"workflows/xapian-query-syntax/#references","title":"References","text":"","tags":["tooling"]},{"location":"workflows/xapian-query-syntax/#videos","title":"Videos","text":"","tags":["tooling"]},{"location":"workflows/xapian-query-syntax/#links","title":"Links","text":"<ol> <li>public-inbox help from any mailing list archive</li> <li>Getting Started with Xapian</li> <li>Xapian::QueryParser Syntax on the official documentation of Xapian</li> </ol>","tags":["tooling"]}]}